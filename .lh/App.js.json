{
    "sourceFile": "App.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1664763745549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1664765762723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,200 @@\n+/*Tyler Wiggins\n+This is my own work\n+Senior Project 2022\n+File Description: This is the core of the entire project, this class is the Main and handles all of the navigation and functionality of the entire application.\n+*/\n+\n+//All the imports for the Famizone Social App\n+import { getFocusedRouteNameFromRoute, NavigationContainer } from '@react-navigation/native';\n+import { createStackNavigator } from '@react-navigation/stack';\n+import 'expo-asset';\n+import * as firebase from 'firebase';\n+import _ from 'lodash';\n+import React, { Component } from 'react';\n+import { Image, LogBox } from 'react-native';\n+import { Provider } from 'react-redux';\n+import { applyMiddleware, configureStore } from 'redux';\n+import thunk from 'redux-thunk';\n+import LoginScreen from './frontend/components/auth/Login';\n+import RegisterScreen from './frontend/components/auth/Register';\n+import MainScreen from './frontend/components/Main';\n+import SaveScreen from './frontend/components/main/add/Save';\n+import ChatScreen from './frontend/components/main/chat/Chat';\n+import ChatListScreen from './frontend/components/main/chat/List';\n+import CommentScreen from './frontend/components/main/post/Comment';\n+import PostScreen from './frontend/components/main/post/Post';\n+import EditScreen from './frontend/components/main/profile/Edit';\n+import ProfileScreen from './frontend/components/main/profile/Profile';\n+import BlockedScreen from './frontend/components/main/random/Blocked';\n+import { container } from './frontend/components/styles';\n+import rootReducer from './frontend/redux/reducers';\n+import { registerRootComponent } from 'expo';\n+import Routes from './src/Routes';\n+\n+//Function that works with Redux to reduce the loading time of the application and help with middleware error logging.\n+const store = configureStore(rootReducer, applyMiddleware(thunk))\n+\n+//Logs the time it takes to load each function and loggs it.\n+LogBox.ignoreLogs(['Setting a timer']);\n+const _console = _.clone(console);\n+console.warn = message => {\n+  if (message.indexOf('Setting a timer') <= -1) {\n+    _console.warn(message);\n+  }\n+};\n+\n+class ErrorBoundary extends React.Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = { hasError: false };\n+  }\n+\n+  static getDerivedStateFromError(error) {\n+    // Update state so the next render will show the fallback UI.\n+    return { hasError: true };\n+  }\n+\n+  componentDidCatch(error, errorInfo) {\n+    // You can also log the error to an error reporting service\n+    logErrorToMyService(error, errorInfo);\n+  }\n+\n+  render() {\n+    if (this.state.hasError) {\n+      // You can render any custom fallback UI\n+      return <h1>Something went wrong.</h1>;\n+    }\n+\n+    return this.props.children; \n+  }\n+}\n+\n+\n+//Configurations to connect to the Firebase database.\n+//Note: If Famazone is public on GitHub... for security reasons, you will need to add your own firebase connection string.\n+const firebaseConfig = {\n+  piKey: \"AIzaSyA2O8Dlmw9pltH1Poj9l-7pRt0-Ejp5RtQ\",\n+  authDomain: \"fesocial-df5fa.firebaseapp.com\",\n+  projectId: \"fesocial-df5fa\",\n+  storageBucket: \"fesocial-df5fa.appspot.com\",\n+  messagingSenderId: \"556030609593\",\n+  appId: \"1:556030609593:web:4b86535c3a12fa55403368\",\n+  measurementId: \"G-QD82MWQXWC\"\n+};\n+\n+//Makes the logo globally accessable.\n+const logo = require('./assets/logo.png')\n+\n+//Checks to see if firebase is still connected\n+if (firebase.apps.length === 0) {\n+  firebase.initializeApp(firebaseConfig)\n+}\n+\n+const Stack = createStackNavigator();\n+\n+export class App extends Component {\n+  constructor(props) {\n+    super()\n+    this.state = {\n+      loaded: false,\n+    }\n+  }\n+\n+  //Method to check if the user was succesfully logged in.\n+  componentDidMount() {\n+    firebase.auth().onAuthStateChanged((user) => {\n+      if (!user) {\n+        this.setState({\n+          loggedIn: false,\n+          loaded: true,\n+        })\n+      } else {\n+        this.setState({\n+          loggedIn: true,\n+          loaded: true,\n+        })\n+      }\n+    })\n+  }\n+  render() {\n+    const { loggedIn, loaded } = this.state;\n+    if (!loaded) {\n+      return (\n+        <Image style={container.splash} source={logo} />\n+      )\n+    }\n+\n+    //Checks if the user is authenticated and keeps the user on the login/register screen if they are not authenticated.\n+    if (!loggedIn) {\n+      return (\n+        <NavigationContainer>\n+          <Stack.Navigator initialRouteName=\"Login\">\n+          <ErrorBoundary>\n+  <MyWidget />\n+</ErrorBoundary>\n+            <Stack.Screen name=\"Register\" component={RegisterScreen} navigation={this.props.navigation} options={{ headerShown: false }} />\n+            <Stack.Screen name=\"Login\" navigation={this.props.navigation} component={LoginScreen} options={{ headerShown: false }} />\n+          </Stack.Navigator>\n+        </NavigationContainer>\n+      );\n+    }\n+\n+    //Once the user is logged in, they are directed to the main screen.\n+    return (\n+      <Provider store={store}>\n+        <NavigationContainer >\n+          <Stack.Navigator initialRouteName=\"Main\">\n+            <Stack.Screen key={Date.now()} name=\"Main\" component={MainScreen} navigation={this.props.navigation} options={({ route }) => {\n+              //The dashboard will have a feed of post and the option to navigate to other screens/pages\n+              const routeName = getFocusedRouteNameFromRoute(route) ?? 'Feed';\n+//Switch statement that lets the users choose navigation options.\n+              switch (routeName) {\n+                case 'Camera': {\n+                  return {\n+                    headerTitle: 'Camera',\n+                  };\n+                }\n+                case 'chat': {\n+                  return {\n+                    headerTitle: 'Chat',\n+                  };\n+                }\n+                case 'Profile': {\n+                  return {\n+                    headerTitle: 'Profile',\n+                  };\n+                }\n+                case 'Search': {\n+                  return {\n+                    headerTitle: 'Search',\n+                  };\n+                }\n+                case 'Feed':\n+                default: {\n+                  return {\n+                    headerTitle: 'Famizone Social',\n+                  };\n+                }\n+              }\n+            }}\n+            />\n+            {/* Stack navigators that will re-direct the user to the page they want to go to when a button is clicked */}\n+            <Stack.Screen key={Date.now()} name=\"Save\" component={SaveScreen} navigation={this.props.navigation} />\n+            <Stack.Screen key={Date.now()} name=\"video\" component={SaveScreen} navigation={this.props.navigation} />\n+            <Stack.Screen key={Date.now()} name=\"Post\" component={PostScreen} navigation={this.props.navigation} />\n+            <Stack.Screen key={Date.now()} name=\"Chat\" component={ChatScreen} navigation={this.props.navigation} />\n+            <Stack.Screen key={Date.now()} name=\"ChatList\" component={ChatListScreen} navigation={this.props.navigation} />\n+            <Stack.Screen key={Date.now()} name=\"Edit\" component={EditScreen} navigation={this.props.navigation} />\n+            <Stack.Screen key={Date.now()} name=\"Profile\" component={ProfileScreen} navigation={this.props.navigation} />\n+            <Stack.Screen key={Date.now()} name=\"Comment\" component={CommentScreen} navigation={this.props.navigation} />\n+            <Stack.Screen key={Date.now()} name=\"ProfileOther\" component={ProfileScreen} navigation={this.props.navigation} />\n+            <Stack.Screen key={Date.now()} name=\"Blocked\" component={BlockedScreen} navigation={this.props.navigation} options={{ headerShown: false }} />\n+          </Stack.Navigator>\n+        </NavigationContainer>\n+      </Provider>\n+    )\n+  }\n+}\n+\n+//Exports this class so that if can be accessed by other classes.\n+export default App\n\\ No newline at end of file\n"
                },
                {
                    "date": 1664929844220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n import ProfileScreen from './frontend/components/main/profile/Profile';\n import BlockedScreen from './frontend/components/main/random/Blocked';\n import { container } from './frontend/components/styles';\n import rootReducer from './frontend/redux/reducers';\n-import { registerRootComponent } from 'expo';\n+//import { registerRootComponent } from 'expo';\n import Routes from './src/Routes';\n \n //Function that works with Redux to reduce the loading time of the application and help with middleware error logging.\n const store = configureStore(rootReducer, applyMiddleware(thunk))\n@@ -196,25 +196,5 @@\n   }\n }\n \n //Exports this class so that if can be accessed by other classes.\n-export default App\n-import { StatusBar } from 'expo-status-bar';\n-import { StyleSheet, Text, View } from 'react-native';\n-\n-export default function App() {\n-  return (\n-    <View style={styles.container}>\n-      <Text>This is awesome</Text>\n-      <StatusBar style=\"auto\" />\n-    </View>\n-  );\n-}\n-\n-const styles = StyleSheet.create({\n-  container: {\n-    flex: 1,\n-    backgroundColor: '#fff',\n-    alignItems: 'center',\n-    justifyContent: 'center',\n-  },\n-});\n\\ No newline at end of file\n+export default App\n\\ No newline at end of file\n"
                },
                {
                    "date": 1664962412158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n //All the imports for the Famizone Social App\n import { getFocusedRouteNameFromRoute, NavigationContainer } from '@react-navigation/native';\n import { createStackNavigator } from '@react-navigation/stack';\n import 'expo-asset';\n-import * as firebase from 'firebase';\n+//import * as firebase from 'firebase';\n import _ from 'lodash';\n import React, { Component } from 'react';\n import { Image, LogBox } from 'react-native';\n import { Provider } from 'react-redux';\n@@ -28,9 +28,9 @@\n import BlockedScreen from './frontend/components/main/random/Blocked';\n import { container } from './frontend/components/styles';\n import rootReducer from './frontend/redux/reducers';\n //import { registerRootComponent } from 'expo';\n-import Routes from './src/Routes';\n+//import Routes from './src/Routes';\n \n //Function that works with Redux to reduce the loading time of the application and help with middleware error logging.\n const store = configureStore(rootReducer, applyMiddleware(thunk))\n \n"
                },
                {
                    "date": 1664962418405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import { getFocusedRouteNameFromRoute, NavigationContainer } from '@react-navigation/native';\n import { createStackNavigator } from '@react-navigation/stack';\n import 'expo-asset';\n //import * as firebase from 'firebase';\n+import firebase from 'firebase/compat/app';\n import _ from 'lodash';\n import React, { Component } from 'react';\n import { Image, LogBox } from 'react-native';\n import { Provider } from 'react-redux';\n"
                },
                {
                    "date": 1664967724279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,16 +73,19 @@\n \n //Configurations to connect to the Firebase database.\n //Note: If Famazone is public on GitHub... for security reasons, you will need to add your own firebase connection string.\n const firebaseConfig = {\n-  piKey: \"AIzaSyA2O8Dlmw9pltH1Poj9l-7pRt0-Ejp5RtQ\",\n+// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n+const firebaseConfig = {\n+  apiKey: \"AIzaSyA2O8Dlmw9pltH1Poj9l-7pRt0-Ejp5RtQ\",\n   authDomain: \"fesocial-df5fa.firebaseapp.com\",\n   projectId: \"fesocial-df5fa\",\n   storageBucket: \"fesocial-df5fa.appspot.com\",\n   messagingSenderId: \"556030609593\",\n   appId: \"1:556030609593:web:4b86535c3a12fa55403368\",\n   measurementId: \"G-QD82MWQXWC\"\n };\n+};\n \n //Makes the logo globally accessable.\n const logo = require('./assets/logo.png')\n \n"
                },
                {
                    "date": 1664967730981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,19 +73,17 @@\n \n //Configurations to connect to the Firebase database.\n //Note: If Famazone is public on GitHub... for security reasons, you will need to add your own firebase connection string.\n const firebaseConfig = {\n-// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n-const firebaseConfig = {\n+\n   apiKey: \"AIzaSyA2O8Dlmw9pltH1Poj9l-7pRt0-Ejp5RtQ\",\n   authDomain: \"fesocial-df5fa.firebaseapp.com\",\n   projectId: \"fesocial-df5fa\",\n   storageBucket: \"fesocial-df5fa.appspot.com\",\n   messagingSenderId: \"556030609593\",\n   appId: \"1:556030609593:web:4b86535c3a12fa55403368\",\n   measurementId: \"G-QD82MWQXWC\"\n };\n-};\n \n //Makes the logo globally accessable.\n const logo = require('./assets/logo.png')\n \n"
                },
                {
                    "date": 1665054334765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n //import { registerRootComponent } from 'expo';\n //import Routes from './src/Routes';\n \n //Function that works with Redux to reduce the loading time of the application and help with middleware error logging.\n-\n+c\n const store = configureStore(rootReducer, applyMiddleware(thunk))\n \n //Logs the time it takes to load each function and loggs it.\n LogBox.ignoreLogs(['Setting a timer']);\n"
                },
                {
                    "date": 1665054343018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n //import { registerRootComponent } from 'expo';\n //import Routes from './src/Routes';\n \n //Function that works with Redux to reduce the loading time of the application and help with middleware error logging.\n-console.lo\n+console.log\n const store = configureStore(rootReducer, applyMiddleware(thunk))\n \n //Logs the time it takes to load each function and loggs it.\n LogBox.ignoreLogs(['Setting a timer']);\n"
                }
            ],
            "date": 1664763745549,
            "name": "Commit-0",
            "content": "import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>This is awesome</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"
        }
    ]
}