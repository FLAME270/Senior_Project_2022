{
    "sourceFile": "frontend/components/Main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1664962754392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1664962760000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n //imports\n import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\n import * as Notifications from 'expo-notifications';\n //import firebase from 'firebase';\n+import firebase from 'firebase/compat/app';\n import React, { useEffect, useState } from 'react';\n import { View } from 'react-native';\n import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\n import { connect } from 'react-redux';\n"
                }
            ],
            "date": 1664962754392,
            "name": "Commit-0",
            "content": "/*Tyler Wiggins\nThis is my own work\nSenior Project 2022\nFile Description: This is the main/index page, the users can scroll through their feed or navigate to another page.\n*/\n\n//imports\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport * as Notifications from 'expo-notifications';\n//import firebase from 'firebase';\nimport React, { useEffect, useState } from 'react';\nimport { View } from 'react-native';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { reload } from '../redux/actions/index';\nimport CameraScreen from './main/add/Camera';\nimport ChatListScreen from './main/chat/List';\nimport FeedScreen from './main/post/Feed';\nimport ProfileScreen from './main/profile/Profile';\nimport SearchScreen from './main/profile/Search';\n\n//Creates an easy to navigate bottom tab that acts as a navbar.\nconst Tab = createMaterialBottomTabNavigator();\n\n//Main function that loads the main page, the feed, and the navbar.\nfunction Main(props) {\n    const [unreadChats, setUnreadChats] = useState(false)\n    const [lastNot, setLastNot] = useState(false)\n\n    const lastNotificationResponse = Notifications.useLastNotificationResponse();\n\n//if the user clicked a notification to get to the page and they are logged in, they will be taken directly to the post, chat, or profile.\n    if (lastNotificationResponse != null && lastNotificationResponse != lastNot) {\n        setLastNot(lastNotificationResponse)\n        switch (lastNotificationResponse.notification.request.content.data.type) {\n            case 0:\n                props.navigation.navigate(\"Post\", { item: lastNotificationResponse.notification.request.content.data.postId, user: lastNotificationResponse.notification.request.content.data.user, notification: true })\n                break;\n            case 1:\n                props.navigation.navigate(\"Chat\", { user: lastNotificationResponse.notification.request.content.data.user, notification: true })\n                break;\n            case 2:\n                props.navigation.navigate(\"ProfileOther\", { uid: lastNotificationResponse.notification.request.content.data.user, username: undefined, notification: true })\n                break;\n        }\n    }\n    //Marks the notification as old or seen if the user aknowledges the notification.\n    useEffect(() => {\n        props.reload();\n        Notifications.addNotificationResponseReceivedListener((notification) => {\n            switch (notification.notification.request.content.data.type) {\n                case \"post\":\n                    props.navigation.navigate(\"Post\", { item: notification.notification.request.content.data.postId, user: notification.notification.request.content.data.user, notification: true })\n                    break;\n                case \"chat\":\n                    props.navigation.navigate(\"Chat\", { user: notification.notification.request.content.data.user, notification: true })\n                    break;\n                case \"profile\":\n                    props.navigation.navigate(\"ProfileOther\", { uid: notification.notification.request.content.data.user, username: undefined, notification: true })\n                    break;\n            }\n        });\n\n\n    }, [])\n\n    //If the user is blocked, no notifications are sent or recieved.\n    useEffect(() => {\n        if (props.currentUser != null) {\n            if (props.currentUser.banned) {\n                props.navigation.navigate(\"Blocked\")\n            }\n        }\n        setUnreadChats(false)\n        for (let i = 0; i < props.chats.length; i++) {\n            if (!props.chats[i][firebase.auth().currentUser.uid]) {\n\n                setUnreadChats(true)\n            }\n        }\n    }, [props.currentUser, props.chats])\n\n    if (props.currentUser == null) {\n        return (<View></View>)\n    }\n\n    return (\n        //All of this is the navigation tab that has the feed page, search page, camera/add new post page, chat, and profile page.\n        <View style={{ flex: 1, backgroundColor: 'white' }}>\n            <Tab.Navigator initialRouteName=\"Feed\"\n\n                labeled={false}\n                tabBarOptions={{\n                    showIcon: true, showLabel: false, indicatorStyle: {\n                        opacity: 0\n                    }\n                }}\n                barStyle={{ backgroundColor: '#ffffff' }}>\n                <Tab.Screen key={Date.now()} name=\"Feed\" component={FeedScreen}\n                    options={{\n                        tabBarIcon: ({ color, size }) => (\n                            <MaterialCommunityIcons name=\"home\" color={color} size={26} />\n                        ),\n                    }} />\n                <Tab.Screen key={Date.now()} name=\"Search\" component={SearchScreen} navigation={props.navigation}\n                    options={{\n                        tabBarLabel: 'Seach',\n                        tabBarIcon: ({ color, size }) => (\n                            <MaterialCommunityIcons name=\"magnify\" color={color} size={26} />\n                        ),\n                    }} />\n                <Tab.Screen key={Date.now()} name=\"Camera\" component={CameraScreen} navigation={props.navigation}\n                    options={{\n                        tabBarIcon: ({ color, size }) => (\n                            <MaterialCommunityIcons name=\"camera\" color={color} size={26} />\n                        ),\n                    }} />\n                <Tab.Screen key={Date.now()} name=\"chat\" component={ChatListScreen} navigation={props.navigation} share={false}\n                    options={{\n                        tabBarIcon: ({ color, size }) => (\n\n                            <View>\n\n                                {unreadChats ?\n                                    <View style={{ backgroundColor: 'red', width: 10, height: 10, position: 'absolute', right: 0, borderRadius: 100 }}></View>\n\n                                    :\n                                    null\n                                }\n                                <View />\n\n                                <MaterialCommunityIcons name=\"chat\" color={color} size={26} />\n                            </View>\n                        ),\n                    }} />\n                <Tab.Screen name=\"Profile\" component={ProfileScreen} navigation={props.navigation}\n                    listeners={({ navigation }) => ({\n                        tabPress: event => {\n                            event.preventDefault();\n                            navigation.navigate(\"Profile\", { uid: firebase.auth().currentUser.uid })\n                        }\n                    })}\n                    options={{\n                        tabBarIcon: ({ color, size }) => (\n                            <MaterialCommunityIcons name=\"account-circle\" color={color} size={26} />\n                        ),\n                    }} />\n            </Tab.Navigator>\n        </View>\n\n    )\n}\n\n//Log the users actions\nconst mapStateToProps = (store) => ({\n    currentUser: store.userState.currentUser,\n    chats: store.userState.chats,\n    friendsRequestsReceived: store.userState.friendsRequestsReceived,\n})\n\n//dispatches the actions to the store.\nconst mapDispatchProps = (dispatch) => bindActionCreators({ reload }, dispatch);\n\n//Creates functions that dispatch when called, and pass those functions as props to the components.\nexport default connect(mapStateToProps, mapDispatchProps)(Main);\n"
        }
    ]
}