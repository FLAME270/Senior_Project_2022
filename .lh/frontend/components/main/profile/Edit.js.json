{
    "sourceFile": "frontend/components/main/profile/Edit.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1664963003347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1664963008737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n //imports\n import { Feather, FontAwesome5 } from '@expo/vector-icons';\n import * as ImagePicker from 'expo-image-picker';\n import * as Updates from 'expo-updates';\n+import firebase from 'firebase/compat/app';\n //import firebase from 'firebase';\n import React, { useEffect, useLayoutEffect, useState } from 'react';\n import { Button, Image, Text, TextInput, TouchableOpacity, View } from 'react-native';\n import { connect } from 'react-redux';\n"
                }
            ],
            "date": 1664963003347,
            "name": "Commit-0",
            "content": "/*Tyler Wiggins\nThis is my own work\nSenior Project 2022\nFile Description: This class handles all the editing functionality.\n*/\n\n//imports\nimport { Feather, FontAwesome5 } from '@expo/vector-icons';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Updates from 'expo-updates';\n//import firebase from 'firebase';\nimport React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { Button, Image, Text, TextInput, TouchableOpacity, View } from 'react-native';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { updateUserFeedPosts } from '../../../redux/actions/index';\nimport { container, form, navbar, text, utils } from '../../styles';\n\nrequire('firebase/firestore')\n\n//edit function that allows users to edit their profile and the bio.\nfunction Edit(props) {\n    const [name, setName] = useState(props.currentUser.name);\n    const [description, setDescription] = useState(\"\");\n    const [image, setImage] = useState(props.currentUser.image);\n    const [imageChanged, setImageChanged] = useState(false);\n    const [hasGalleryPermission, setHasGalleryPermission] = useState(null);\n\n//Allows user to log out of their account\n    const onLogout = async () => {\n        firebase.auth().signOut();\n        Updates.reloadAsync()\n    }\n\n//If chnged, then set a new description/bio.\n    useEffect(() => {\n        (async () => {\n            if (props.currentUser.description !== undefined) {\n                setDescription(props.currentUser.description)\n            }\n\n        })();\n    }, []);\n\n    //Shows a green checkmark that saves changes made to the profile.\n    useLayoutEffect(() => {\n        props.navigation.setOptions({\n            headerRight: () => (\n\n                <Feather style={navbar.image} name=\"check\" size={24} color=\"green\" onPress={() => { console.log({ name, description }); Save() }} />\n            ),\n        });\n    }, [props.navigation, name, description, image, imageChanged]);\n\n//A user can pick an image for their profile picture.\n    const pickImage = async () => {\n        if (true) {\n            let result = await ImagePicker.launchImageLibraryAsync({\n                mediaTypes: ImagePicker.MediaTypeOptions.Images,\n                allowsEditing: true,\n                aspect: [1, 1],\n                quality: 1,\n            });\n\n            if (!result.cancelled) {\n                setImage(result.uri);\n                setImageChanged(true);\n            }\n        }\n    };\n\n//Save the new profile picture, then upload it to the firebase DB.\n    const Save = async () => {\n        if (imageChanged) {\n            const uri = image;\n            const childPath = `profile/${firebase.auth().currentUser.uid}`;\n\n            const response = await fetch(uri);\n            const blob = await response.blob();\n\n            const task = firebase\n                .storage()\n                .ref()\n                .child(childPath)\n                .put(blob);\n\n            const taskProgress = snapshot => {\n                console.log(`transferred: ${snapshot.bytesTransferred}`)\n            }\n//Turn the image into a url stored in a firebase bucket.\n            const taskCompleted = () => {\n                task.snapshot.ref.getDownloadURL().then((snapshot) => {\n//pushes the updated name, description and image to firebase.\n                    firebase.firestore().collection(\"users\")\n                        .doc(firebase.auth().currentUser.uid)\n                        .update({\n                            name,\n                            description,\n                            image: snapshot,\n                        }).then(() => {\n                            props.updateUserFeedPosts();\n                            props.navigation.goBack()\n\n                        })\n                })\n            }\n//log the information pushed to firebase.\n            const taskError = snapshot => {\n                console.log(snapshot)\n            }\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n        } else {\n            saveData({\n                name,\n                description,\n            })\n        }\n    }\n\n    //Saves the data if they change someting and goes back.\n    const saveData = (data) => {\n        firebase.firestore().collection(\"users\")\n            .doc(firebase.auth().currentUser.uid)\n            .update(data).then(() => {\n                props.updateUserFeedPosts();\n\n                props.navigation.goBack()\n            })\n    }\n\n    return (\n        <View style={container.form}>\n{/* Lets the user pich a profile image from their photos */}\n            <TouchableOpacity style={[utils.centerHorizontal, utils.marginBottom]} onPress={() => pickImage()} >\n                {image == 'default' ?\n                    (\n                        <FontAwesome5\n                            style={[utils.profileImageBig, utils.marginBottomSmall]}\n                            name=\"user-circle\" size={80} color=\"black\" />\n                    )\n                    :\n                    (\n                        <Image\n                            style={[utils.profileImageBig, utils.marginBottomSmall]}\n                            source={{\n                                uri: image\n                            }}\n                        />\n                    )\n                }\n                <Text style={text.changePhoto}>Change Profile Photo</Text>\n            </TouchableOpacity>\n\n{/* frontend UI that Lets the user chang their name */}\n            <TextInput\n                value={name}\n                style={form.textInput}\n                placeholder=\"Name\"\n                onChangeText={(name) => setName(name)}\n            />\n            {/* frontend UI that Lets the user chang their BIO */}\n            <TextInput\n                value={description}\n                style={[form.textInput]}\n                placeholderTextColor={\"#e8e8e8\"}\n                placeholder=\"Description\"\n                onChangeText={(description) => { setDescription(description); }}\n            />\n            {/* Logout button */}\n            <Button\n                title=\"Logout\"\n                onPress={() => onLogout()} />\n        </View>\n\n    )\n}\n\nconst mapStateToProps = (store) => ({\n    currentUser: store.userState.currentUser,\n})\n\n//map the actions preformed on this page.\nconst mapDispatchProps = (dispatch) => bindActionCreators({ updateUserFeedPosts }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchProps)(Edit);\n"
        }
    ]
}