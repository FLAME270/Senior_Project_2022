{
    "sourceFile": "frontend/components/main/profile/Profile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1664963021126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1664963021126,
            "name": "Commit-0",
            "content": "/*Tyler Wiggins\nThis is my own work\nSenior Project 2022\nFile Description: Displays the user profile and actions a user can do.\nSource: https://codesandbox.io/s/i4zg4\n*/\n\n//imports\nimport { FontAwesome5 } from '@expo/vector-icons';\n//import firebase from 'firebase';\nimport React, { useEffect, useState } from 'react';\nimport { ActivityIndicator, FlatList, Image, Text, TouchableOpacity, View } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { sendNotification } from '../../../redux/actions/index';\nimport { container, text, utils } from '../../styles';\nimport CachedImage from '../random/CachedImage';\nrequire('firebase/firestore')\n\n\n//This functionality shows the user their profile and what other users will see.\nfunction Profile(props) {\n    const [userPosts, setUserPosts] = useState([]);\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [following, setFollowing] = useState(false)\n\n    useEffect(() => {\n        const { currentUser, posts } = props;\n//Checks to see if you own the profile or just visiting it. \n        if (props.route.params.uid === firebase.auth().currentUser.uid) {\n            setUser(currentUser)\n            setUserPosts(posts)\n            setLoading(false)\n        }\n        else {\n            //pull users post from the database and display it.\n            firebase.firestore()\n                .collection(\"users\")\n                .doc(props.route.params.uid)\n                .get()\n                .then((snapshot) => {\n                    if (snapshot.exists) {\n                        props.navigation.setOptions({\n                            title: snapshot.data().username,\n                        })\n\n                        setUser({ uid: props.route.params.uid, ...snapshot.data() });\n                    }\n                    setLoading(false)\n\n                })\n            firebase.firestore()\n                .collection(\"posts\")\n                .doc(props.route.params.uid)\n                .collection(\"userPosts\")\n                .orderBy(\"creation\", \"desc\")\n                .get()\n                .then((snapshot) => {\n                    let posts = snapshot.docs.map(doc => {\n                        const data = doc.data();\n                        const id = doc.id;\n                        return { id, ...data }\n                    })\n                    setUserPosts(posts)\n                })\n        }\n\n//determine if the user is following you or not.\n        if (props.following.indexOf(props.route.params.uid) > -1) {\n            setFollowing(true);\n        } else {\n            setFollowing(false);\n        }\n\n    }, [props.route.params.uid, props.following, props.currentUser, props.posts])\n\n    //When a user clicks the follow button, inc\n    const onFollow = () => {\n        firebase.firestore()\n            .collection(\"following\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userFollowing\")\n            .doc(props.route.params.uid)\n            .set({})\n\n        props.sendNotification(user.notificationToken, \"New Follower\", `${props.currentUser.name} Started following you`, { type: 'profile', user: firebase.auth().currentUser.uid })\n    }\n    //if a user unfollows tell the database to remove the following user form the follow list.\n    const onUnfollow = () => {\n        firebase.firestore()\n            .collection(\"following\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userFollowing\")\n            .doc(props.route.params.uid)\n            .delete()\n    }\n\n    //Load the profile. But say the user is not found if they delete their account.\n    if (loading) {\n        return (\n            <View style={{ height: '100%', justifyContent: 'center', margin: 'auto' }}>\n                <ActivityIndicator style={{ alignSelf: 'center', marginBottom: 20 }} size=\"large\" color=\"#00ff00\" />\n                <Text style={[text.notAvailable]}>Loading</Text>\n            </View>\n        )\n    }\n    if (user === null) {\n        return (\n            <View style={{ height: '100%', justifyContent: 'center', margin: 'auto' }}>\n                <FontAwesome5 style={{ alignSelf: 'center', marginBottom: 20 }} name=\"dizzy\" size={40} color=\"black\" />\n                <Text style={[text.notAvailable]}>User Not Found</Text>\n            </View>\n        )\n    }\n    return (\n        <ScrollView style={[container.container, utils.backgroundWhite]}>\n\n            <View style={[container.profileInfo]}>\n\n                <View style={[utils.noPadding, container.row]}>\n\n                    {user.image == 'default' ?\n                        (\n                            <FontAwesome5\n                                style={[utils.profileImageBig, utils.marginBottomSmall]}\n                                name=\"user-circle\" size={80} color=\"black\" />\n                        )\n                        :\n                        (\n                            <Image\n                                style={[utils.profileImageBig, utils.marginBottomSmall]}\n                                source={{\n                                    uri: user.image\n                                }}\n                            />\n                        )\n                    }\n{/* Shows the number of post, followers, and following. */}\n                    <View style={[container.container, container.horizontal, utils.justifyCenter, utils.padding10Sides]}>\n\n                        <View style={[utils.justifyCenter, text.center, container.containerImage]}>\n                            <Text style={[text.bold, text.large, text.center]}>{userPosts.length}</Text>\n                            <Text style={[text.center]}>Posts</Text>\n                        </View>\n                        <View style={[utils.justifyCenter, text.center, container.containerImage]}>\n                            <Text style={[text.bold, text.large, text.center]}>{user.followersCount}</Text>\n                            <Text style={[text.center]}>Followers</Text>\n                        </View>\n                        <View style={[utils.justifyCenter, text.center, container.containerImage]}>\n                            <Text style={[text.bold, text.large, text.center]}>{user.followingCount}</Text>\n                            <Text style={[text.center]}>Following</Text>\n                        </View>\n                    </View>\n\n                </View>\n\n{/* If your visiting the profile, you can follow or unfollow the user. */}\n                <View>\n                    <Text style={text.bold}>{user.name}</Text>\n                    <Text style={[text.profileDescription, utils.marginBottom]}>{user.description}</Text>\n\n                    {props.route.params.uid !== firebase.auth().currentUser.uid ? (\n                        <View style={[container.horizontal]}>\n                            {following ? (\n                                <TouchableOpacity\n                                    style={[utils.buttonOutlined, container.container, utils.margin15Right]}\n                                    title=\"Following\"\n                                    onPress={() => onUnfollow()}>\n                                    <Text style={[text.bold, text.center, text.green]}>Following</Text>\n                                </TouchableOpacity>\n                            )\n                                :\n                                (\n                                    <TouchableOpacity\n                                        style={[utils.buttonOutlined, container.container, utils.margin15Right]}\n                                        title=\"Follow\"\n                                        onPress={() => onFollow()}>\n                                        <Text style={[text.bold, text.center, { color: '#2196F3' }]}>Follow</Text>\n                                    </TouchableOpacity>\n\n                                )}\n\n                            <TouchableOpacity\n                                style={[utils.buttonOutlined, container.container]}\n                                title=\"Follow\"\n                                onPress={() => props.navigation.navigate('Chat', { user })}>\n                                <Text style={[text.bold, text.center]}>Message</Text>\n                            </TouchableOpacity>\n                        </View>\n                    ) :\n                    //If you own the profile an edit button will show up.\n                        <TouchableOpacity\n                            style={utils.buttonOutlined}\n                            onPress={() => props.navigation.navigate('Edit')}>\n                            <Text style={[text.bold, text.center]}>Edit Profile</Text>\n                        </TouchableOpacity>}\n                </View>\n            </View>\n\n{/* Loads a grid with all the users post, all displayed on their profile. */}\n            <View style={[utils.borderTopGray]}>\n                <FlatList\n                    numColumns={3}\n                    horizontal={false}\n                    data={userPosts}\n                    style={{}}\n                    renderItem={({ item }) => (\n                        <TouchableOpacity\n                            style={[container.containerImage, utils.borderWhite]}\n                            onPress={() => props.navigation.navigate(\"Post\", { item, user })}>\n\n                            {item.type == 0 ?\n\n                                <CachedImage\n                                    cacheKey={item.id}\n                                    style={container.image}\n                                    source={{ uri: item.downloadURLStill }}\n                                />\n\n                                :\n\n                                <CachedImage\n                                    cacheKey={item.id}\n                                    style={container.image}\n                                    source={{ uri: item.downloadURL }}\n                                />\n                            }\n                        </TouchableOpacity>\n                    )}\n                />\n            </View>\n        </ScrollView >\n\n    )\n}\n\n//Map all the actions preformed by the user.\nconst mapStateToProps = (store) => ({\n    currentUser: store.userState.currentUser,\n    posts: store.userState.posts,\n    following: store.userState.following\n})\n\nconst mapDispatchProps = (dispatch) => bindActionCreators({ sendNotification }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchProps)(Profile);\n\n"
        }
    ]
}