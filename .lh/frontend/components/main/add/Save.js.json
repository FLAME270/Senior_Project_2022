{
    "sourceFile": "frontend/components/main/add/Save.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1664962833089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1664962839283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n \n import { Feather } from '@expo/vector-icons';\n import { Video } from 'expo-av';\n //import firebase from 'firebase';\n+import firebase from 'firebase/compat/app';\n import React, { useLayoutEffect, useState } from 'react';\n import { ActivityIndicator, Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n import MentionsTextInput from 'react-native-mentions';\n import { Snackbar } from 'react-native-paper';\n"
                }
            ],
            "date": 1664962833089,
            "name": "Commit-0",
            "content": "/*Tyler Wiggins\nThis is my own work\nSenior Project 2022\nFile Description: Once the user picks or save a photo or video, this class will add it to the firebase db.\n*/\n\nimport { Feather } from '@expo/vector-icons';\nimport { Video } from 'expo-av';\n//import firebase from 'firebase';\nimport React, { useLayoutEffect, useState } from 'react';\nimport { ActivityIndicator, Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport MentionsTextInput from 'react-native-mentions';\nimport { Snackbar } from 'react-native-paper';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchUserPosts, sendNotification } from '../../../redux/actions/index';\nimport { container, navbar, text, utils } from '../../styles';\n\n//Function to easily connect to firebase\nrequire(\"firebase/firestore\")\nrequire(\"firebase/firebase-storage\")\n\n\n//function to save an image or video to the firebase DB.\nfunction Save(props) {\n    const [caption, setCaption] = useState(\"\")\n    const [uploading, setUploading] = useState(false)\n    const [error, setError] = useState(false)\n    const [data, setData] = useState(\"\")\n    const [keyword, setKeyword] = useState(\"\")\n\n//Changes the photos layout to limit the photo size.\n    useLayoutEffect(() => {\n        props.navigation.setOptions({\n            headerRight: () => (\n                <Feather style={navbar.image} name=\"check\" size={24} color=\"green\" onPress={() => { uploadImage() }} />\n            ),\n        });\n    }, [caption]);\n\n    //Uploads the image to the firebase DB using a query.\n    const uploadImage = async () => {\n        if (uploading) {\n            return;\n        }\n        setUploading(true)\n        let downloadURLStill = null\n        let downloadURL = await SaveStorage(props.route.params.source, `post/${firebase.auth().currentUser.uid}/${Math.random().toString(36)}`)\n\n        if (props.route.params.imageSource != null) {\n            downloadURLStill = await SaveStorage(props.route.params.imageSource, `post/${firebase.auth().currentUser.uid}/${Math.random().toString(36)}`)\n        }\n\n        savePostData(downloadURL, downloadURLStill);\n\n    }\n\n    //Turns the image into a url to be put in a firebase bucket.\n    const SaveStorage = async (image, path) => {\n        if (image == 'default') {\n            return '';\n        }\n\n        const fileRef = firebase.storage().ref()\n            .child(path);\n\n        const response = await fetch(image);\n        const blob = await response.blob();\n\n        const task = await fileRef.put(blob);\n\n        const downloadURL = await task.ref.getDownloadURL();\n\n        return downloadURL;\n    }\n\n    //Once the user makes a post, the information if pushed to firebase using a query.\n    const savePostData = (downloadURL, downloadURLStill) => {\n        let object = {\n            downloadURL,\n            caption,\n            likesCount: 0,\n            commentsCount: 0,\n            type: props.route.params.type,\n            creation: firebase.firestore.FieldValue.serverTimestamp()\n        }\n        if (downloadURLStill != null) {\n            object.downloadURLStill = downloadURLStill\n        }\n\n        firebase.firestore()\n            .collection('posts')\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userPosts\")\n            .add(object).then((result) => {\n                props.fetchUserPosts()\n                props.navigation.popToTop()\n            }).catch((error) => {\n                setUploading(false)\n                setError(true)\n            })\n//for security, user can use abc's and 0 - 9.\n        var pattern = /\\B@[a-z0-9_-]+/gi;\n        let array = caption.match(pattern);\n\n        if (array !== null) {\n\n            for (let i = 0; i < array.length; i++) {\n                firebase.firestore()\n                    .collection(\"users\")\n                    .where(\"username\", \"==\", array[i].substring(1))\n                    .get()\n                    .then((snapshot) => {\n\n                        //If a user was tagged, they get notified.\n                        snapshot.forEach((doc) => {\n                            props.sendNotification(doc.data().notificationToken, \"New tag\", `${props.currentUser.name} Tagged you in a post`, { type: 0, user: firebase.auth().currentUser.uid })\n                        });\n                    })\n            }\n        }\n    }\n\n    //Suggest a user to tag in a post.\n    const renderSuggestionsRow = ({ item }, hidePanel) => {\n        return (\n            <TouchableOpacity onPress={() => onSuggestionTap(item.username, hidePanel)}>\n                <View style={styles.suggestionsRowContainer}>\n                    <View style={styles.userIconBox}>\n                        <Image\n                            style={{ aspectRatio: 1 / 1, height: 45 }}\n                            source={{\n                                uri: item.image\n                            }}\n                        />\n                    </View>\n                    <View style={styles.userDetailsBox}>\n                        <Text style={styles.displayNameText}>{item.name}</Text>\n                        <Text style={styles.usernameText}>@{item.username}</Text>\n                    </View>\n                </View>\n            </TouchableOpacity>\n        )\n    }\n\n    //When the suggestion is chosen return it to the DB.\n    const onSuggestionTap = (username, hidePanel) => {\n        hidePanel();\n        const comment = caption.slice(0, - keyword.length)\n        setCaption(comment + '@' + username + \" \");\n    }\n\n    const callback = (keyword) => {\n        setKeyword(keyword)\n        firebase.firestore()\n            .collection(\"users\")\n            .where(\"username\", \">=\", keyword.substring(1))\n            .limit(10)\n            .get()\n            .then((snapshot) => {\n                let result = snapshot.docs.map(doc => {\n\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data }\n                });\n                setData(result)\n            })\n    }\n    return (\n        <View style={[container.container, utils.backgroundWhite]}>\n            {uploading ? (\n\n                <View style={[container.container, utils.justifyCenter, utils.alignItemsCenter]}>\n                    <ActivityIndicator style={utils.marginBottom} size=\"large\" />\n                    <Text style={[text.bold, text.large]}>Upload in progress...</Text>\n                </View>\n            ) : (\n                // Makes a textbox that user can type a caption in.\n                <View style={[container.container]}>\n                    <View style={[container.container, utils.backgroundWhite, utils.padding15]}>\n\n                        <View style={[{ marginBottom: 20, width: '100%' }]}>\n\n\n                            <MentionsTextInput\n\n                                textInputStyle={{ borderColor: '#ebebeb', borderWidth: 1, padding: 5, fontSize: 15, width: '100%' }}\n                                suggestionsPanelStyle={{ backgroundColor: 'rgba(100,100,100,0.1)' }}\n                                loadingComponent={() => <View style={{ flex: 1, width: 200, justifyContent: 'center', alignItems: 'center' }}><ActivityIndicator /></View>}\n                                textInputMinHeight={30}\n                                textInputMaxHeight={80}\n                                trigger={'@'}\n                                triggerLocation={'new-word-only'} // 'new-word-only', 'anywhere'\n                                value={caption}\n                                onChangeText={setCaption}\n                                triggerCallback={callback.bind(this)}\n                                renderSuggestionsRow={renderSuggestionsRow.bind(this)}\n                                suggestionsData={data}\n                                keyExtractor={(item, index) => item.username}\n                                suggestionRowHeight={45}\n                                horizontal={true}\n                                MaxVisibleRowCount={3}\n                            />\n                        </View>\n                        {/* Frontend UI that shows the user a preview of the Saved video/image. */}\n                        <View>\n                            {props.route.params.type ?\n\n                                <Image\n                                    style={container.image}\n                                    source={{ uri: props.route.params.source }}\n                                    styles={{ aspectRatio: 1 / 1, backgroundColor: 'black' }}\n                                />\n\n                                :\n\n                                <Video\n                                    source={{ uri: props.route.params.source }}\n                                    shouldPlay={true}\n                                    isLooping={true}\n                                    resizeMode=\"cover\"\n\n                                    style={{ aspectRatio: 1 / 1, backgroundColor: 'black' }}\n                                />\n                            }\n                        </View>\n\n                    </View>\n                    {/* Show in error if anything goes wrong. */}\n                    <Snackbar\n                        visible={error}\n                        duration={2000}\n                        onDismiss={() => setError(false)}>\n                        Something Went Wrong!!!\n                    </Snackbar>\n                </View>\n            )}\n\n        </View>\n\n    )\n}\n\n//CSS styleing for the save page.\nconst styles = StyleSheet.create({\n    container: {\n        height: 300,\n        justifyContent: 'flex-end',\n        paddingTop: 100\n    },\n    suggestionsRowContainer: {\n        flexDirection: 'row',\n    },\n    userAvatarBox: {\n        width: 35,\n        paddingTop: 2\n    },\n    userIconBox: {\n        height: 45,\n        width: 45,\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: '#54c19c'\n    },\n    usernameInitials: {\n        color: '#fff',\n        fontWeight: '800',\n        fontSize: 14\n    },\n    userDetailsBox: {\n        flex: 1,\n        justifyContent: 'center',\n        paddingLeft: 10,\n        paddingRight: 15\n    },\n    displayNameText: {\n        fontSize: 13,\n        fontWeight: '500'\n    },\n    usernameText: {\n        fontSize: 12,\n        color: 'rgba(0,0,0,0.6)'\n    }\n});\n\n//Stores the state of the user.\nconst mapStateToProps = (store) => ({\n    currentUser: store.userState.currentUser\n})\n\n//Map the users posts.\nconst mapDispatchProps = (dispatch) => bindActionCreators({ fetchUserPosts, sendNotification }, dispatch);\n\n\nexport default connect(mapStateToProps, mapDispatchProps)(Save);"
        }
    ]
}