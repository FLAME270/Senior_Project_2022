{
    "sourceFile": "frontend/components/main/add/Camera.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1664967143182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1665016652811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { Feather } from '@expo/vector-icons';\n import { useIsFocused } from '@react-navigation/native';\n import { Audio } from \"expo-av\";\n import { Camera } from \"expo-camera\";\n-import * as ImagePicker from 'expo-image-picker';\n+//import * as ImagePicker from 'expo-image-picker';\n import * as MediaLibrary from 'expo-media-library';\n import * as VideoThumbnails from 'expo-video-thumbnails';\n import React, { useEffect, useRef, useState } from \"react\";\n import {\n"
                },
                {
                    "date": 1665297218945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n     );\n }\n \n //CSS like styleing for the camera functionalitty.\n-const styles = StyleSheet.create({\n+const style = StyleSheet.create({\n     closeButton: {\n         position: \"absolute\",\n         top: 35,\n         left: 15,\n"
                },
                {
                    "date": 1665297248381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n import React, { useEffect, useRef, useState } from \"react\";\n import {\n     Dimensions, FlatList, Image, ScrollView, StyleSheet, Text, TouchableOpacity, View\n } from \"react-native\";\n-import { container, utils } from '../../styles';\n+import { container, utils } from '../../style';\n \n //Sets limits to the picture size\n const WINDOW_HEIGHT = Dimensions.get(\"window\").height;\n const WINDOW_WIDTH = Dimensions.get(\"window\").width;\n"
                },
                {
                    "date": 1665297253752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n import React, { useEffect, useRef, useState } from \"react\";\n import {\n     Dimensions, FlatList, Image, ScrollView, StyleSheet, Text, TouchableOpacity, View\n } from \"react-native\";\n-import { container, utils } from '../../style';\n+import { container, utils } from '../../';\n \n //Sets limits to the picture size\n const WINDOW_HEIGHT = Dimensions.get(\"window\").height;\n const WINDOW_WIDTH = Dimensions.get(\"window\").width;\n"
                },
                {
                    "date": 1665297266470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n import React, { useEffect, useRef, useState } from \"react\";\n import {\n     Dimensions, FlatList, Image, ScrollView, StyleSheet, Text, TouchableOpacity, View\n } from \"react-native\";\n-import { container, utils } from '../../';\n+import { container, utils } from '../../styles';\n \n //Sets limits to the picture size\n const WINDOW_HEIGHT = Dimensions.get(\"window\").height;\n const WINDOW_WIDTH = Dimensions.get(\"window\").width;\n"
                }
            ],
            "date": 1664967143182,
            "name": "Commit-0",
            "content": "/*Tyler Wiggins\nThis is my own work\nSenior Project 2022\nFile Description: Devices require a few level of permission before letting an app access the camera and gallery. So this class gets the pictures for a post and store it in a collection in the frirebase DB.\nSource: https://docs.expo.dev/versions/latest/sdk/camera/\n*/\nimport { Feather } from '@expo/vector-icons';\nimport { useIsFocused } from '@react-navigation/native';\nimport { Audio } from \"expo-av\";\nimport { Camera } from \"expo-camera\";\nimport * as ImagePicker from 'expo-image-picker';\nimport * as MediaLibrary from 'expo-media-library';\nimport * as VideoThumbnails from 'expo-video-thumbnails';\nimport React, { useEffect, useRef, useState } from \"react\";\nimport {\n    Dimensions, FlatList, Image, ScrollView, StyleSheet, Text, TouchableOpacity, View\n} from \"react-native\";\nimport { container, utils } from '../../styles';\n\n//Sets limits to the picture size\nconst WINDOW_HEIGHT = Dimensions.get(\"window\").height;\nconst WINDOW_WIDTH = Dimensions.get(\"window\").width;\nconst closeButtonSize = Math.floor(WINDOW_HEIGHT * 0.032);\nconst captureSize = Math.floor(WINDOW_HEIGHT * 0.09);\n\n\n\n\n//Function that lets users upload a video\nexport default function VideoScreen(props) {\n\n    //Variable used to implement the photo/video galery.\n    const [hasPermission, setHasPermission] = useState(null);\n    const [cameraType, setCameraType] = useState(Camera.Constants.Type.back);\n    const [isPreview, setIsPreview] = useState(false);\n    const [isCameraReady, setIsCameraReady] = useState(false);\n    const [isFlash, setIsFlash] = useState(false);\n    const [isVideoRecording, setIsVideoRecording] = useState(false);\n    const [type, setType] = useState(0);\n    const [showGallery, setShowGallery] = useState(true)\n    const [galleryItems, setGalleryItems] = useState([])\n    const [galleryScrollRef, setGalleryScrollRef] = useState(null)\n    const [galleryPickedImage, setGalleryPickedImage] = useState(null)\n    const cameraRef = useRef();\n    const isFocused = useIsFocused();\n\n    useEffect(() => {\n        (async () => {\n//Gets permission to access the camera, gallery, and mic.\n            const cameraPermissions = await Camera.requestCameraPermissionsAsync();\n            const galleryPermissions = await MediaLibrary.requestPermissionsAsync();\n\n            const audioPermissions = await Audio.requestPermissionsAsync();\n\n            //checks if permissions were granted and accesses the users photos if access was granted. The user can then pick a photo or video from their device.\n            if (cameraPermissions.status === 'granted' && audioPermissions.status === 'granted' && galleryPermissions.status === 'granted') {\n                const getPhotos = await MediaLibrary.getAssetsAsync({ sortBy: ['creationTime'], mediaType: ['photo', 'video'] })\n                setGalleryItems(getPhotos)\n                setGalleryPickedImage(getPhotos.assets[0])\n                setHasPermission(true)\n            }\n        })();\n    }, []);\n    //If the user wants to take a picture with their device, they can view what their camera sees.\n    const onCameraReady = () => {\n        setIsCameraReady(true);\n    };\n    //Take the picture\n    const takePicture = async () => {\n        if (cameraRef.current) {\n            const options = { quality: 0.5, base64: true, skipProcessing: true };\n            const data = await cameraRef.current.takePictureAsync(options);\n            const source = data.uri;\n            //if the user likes the picture, they can save it.\n            if (source) {\n                props.navigation.navigate('Save', { source, imageSource: null, type })\n            }\n        }\n    };\n\n    //Record a video using your device.\n    const recordVideo = async () => {\n        if (cameraRef.current) {\n            try {\n//Set a default video quality.\n                const options = { maxDuration: 60, quality: Camera.Constants.VideoQuality['480p'] }\n\n//Saves the video or returns an error if save failed.\n                const videoRecordPromise = cameraRef.current.recordAsync(options);\n                if (videoRecordPromise) {\n                    setIsVideoRecording(true);\n                    const data = await videoRecordPromise;\n                    const source = data.uri;\n                    let imageSource = await generateThumbnail(source)\n                    props.navigation.navigate('Save', { source, imageSource, type })\n\n                }\n            } catch (error) {\n                console.warn(error);\n            }\n        }\n    };\n\n    //Makes a quick thumbnail for the video\n    const generateThumbnail = async (source) => {\n        try {\n            const { uri } = await VideoThumbnails.getThumbnailAsync(\n                source,\n                {\n                    time: 5000,\n                }\n            );\n            return uri;\n        } catch (e) {\n            console.warn(e);\n        }\n    };\n\n//Stops recording the video\n    const stopVideoRecording = async () => {\n\n        if (cameraRef.current) {\n            setIsVideoRecording(false);\n            cameraRef.current.stopRecording();\n        }\n    };\n    //Lets user switch to the front/back camera if on a mobile device.\n    const switchCamera = () => {\n        if (isPreview) {\n            return;\n        }\n        setCameraType((prevCameraType) =>\n            prevCameraType === Camera.Constants.Type.back\n                ? Camera.Constants.Type.front\n                : Camera.Constants.Type.back\n        );\n    };\n\n    //shows all the images the user picked and makes a thumbnail so user can see the picture they chose.\n    const handleGoToSaveOnGalleryPick = async () => {\n        let type = galleryPickedImage.mediaType == 'video' ? 0 : 1\n\n        const loadedAsset = await MediaLibrary.getAssetInfoAsync(galleryPickedImage);\n        let imageSource = null\n        if (type == 0) {\n            imageSource = await generateThumbnail(galleryPickedImage.uri)\n        }\n\n        props.navigation.navigate('Save', {\n            source: loadedAsset.localUri,\n            type,\n            imageSource\n        })\n    }\n\n    //Shows the rendered view for the UI\n    const renderCaptureControl = () => (\n        <View>\n            <View style={{ justifyContent: 'space-evenly', width: '100%', alignItems: 'center', flexDirection: 'row', backgroundColor: 'white' }}>\n\n                {/* Turn on/off the devices flash */}\n                <TouchableOpacity disabled={!isCameraReady} onPress={() => setIsFlash(!isFlash)} >\n                    <Feather style={utils.margin15} name={\"zap\"} size={25} color=\"black\" />\n                </TouchableOpacity>\n\n                {/* Switch to the back/front camera */}\n                <TouchableOpacity disabled={!isCameraReady} onPress={switchCamera}>\n                    <Feather style={utils.margin15} name=\"rotate-cw\" size={25} color=\"black\" />\n                </TouchableOpacity>\n                {type == 0 ?\n// Makes a button that will take a picture with a short touch and a video for a long touch.\n                    <TouchableOpacity\n                        activeOpacity={0.7}\n                        disabled={!isCameraReady}\n                        onLongPress={recordVideo}\n                        onPressOut={stopVideoRecording}\n                        style={styles.capture}\n                    />\n                    :\n                    <TouchableOpacity\n                        activeOpacity={0.7}\n                        disabled={!isCameraReady}\n                        onPress={takePicture}\n                        style={styles.capturePicture}\n                    />}\n\n{/* await to trigger based off users decision to record or simply take a picture. */}\n                <TouchableOpacity disabled={!isCameraReady} onPress={() => type == 1 ? setType(0) : setType(1)} >\n                    <Feather style={utils.margin15} name={type == 0 ? \"camera\" : \"video\"} size={25} color=\"black\" />\n                </TouchableOpacity>\n\n                {/* Opens up the gallery */}\n                <TouchableOpacity onPress={() => setShowGallery(true)} >\n                    <Feather style={utils.margin15} name={\"image\"} size={25} color=\"black\" />\n                </TouchableOpacity>\n            </View>\n\n        </View>\n\n    );\n    //Permission false -> camera does not open.\n    if (hasPermission === null) {\n        return <View />;\n    }\n    if (hasPermission === false) {\n        return <Text style={styles.text}>Permission is required to access the camera</Text>;\n    }\n\n    //This is the page that opens the users photo gallary and lets them scroll through and pick an image.\n    if (showGallery) {\n        return (\n            <ScrollView\n                ref={(ref) => setGalleryScrollRef(ref)}\n                style={[container.container, utils.backgroundWhite]}>\n\n                <View\n                    style={[{ aspectRatio: 1 / 1, height: WINDOW_WIDTH }]}>\n                    <Image\n                        style={{ flex: 1 }}\n                        source={{ uri: galleryPickedImage.uri }}\n\n                        styles={[{ aspectRatio: 1 / 1, height: WINDOW_WIDTH }]}\n                        ratio={'1:1'}\n\n                    />\n                </View>\n                <View style={{ justifyContent: 'flex-end', alignItems: 'center', marginRight: 20, marginVertical: 10, flexDirection: 'row' }}>\n\n                    <TouchableOpacity\n                        style={{ alignItems: 'center', backgroundColor: 'gray', paddingHorizontal: 20, paddingVertical: 10, marginRight: 15, borderRadius: 50, borderWidth: 1, borderColor: 'black' }}\n                        onPress={() => handleGoToSaveOnGalleryPick()} >\n\n                        <Text style={{ fontWeight: 'bold', color: 'white', paddingBottom: 1 }}>Continue</Text>\n                    </TouchableOpacity>\n                    <TouchableOpacity style={{ alignItems: 'center', backgroundColor: 'gray', borderRadius: 50, borderWidth: 1, borderColor: 'black' }} onPress={() => setShowGallery(false)} >\n                        <Feather style={{ padding: 10 }} name={\"camera\"} size={20} color=\"white\" />\n                    </TouchableOpacity>\n                </View>\n                <View style={{ flex: 1 }}>\n\n                    <FlatList\n                        numColumns={3}\n                        horizontal={false}\n                        data={galleryItems.assets}\n\n                        contentContainerStyle={{\n                            flexGrow: 1,\n                        }}\n                        renderItem={({ item }) => (\n                            <TouchableOpacity\n                                style={[container.containerImage, utils.borderWhite]}\n                                onPress={() => { galleryScrollRef.scrollTo({ x: 0, y: 0, animated: true }); setGalleryPickedImage(item); }}>\n\n                                <Image\n                                    style={container.image}\n                                    source={{ uri: item.uri }}\n                                />\n\n                            </TouchableOpacity>\n\n                        )}\n\n                    />\n                </View>\n\n            </ScrollView>\n        )\n    }\n    return (\n        <View style={{ flex: 1, flexDirection: 'column', backgroundColor: 'white' }}>\n\n            <View\n\n                style={[{ aspectRatio: 1 / 1, height: WINDOW_WIDTH }]}>\n                {isFocused ?\n                    <Camera\n                        ref={cameraRef}\n                        style={{ flex: 1 }}\n                        type={cameraType}\n                        flashMode={isFlash ? Camera.Constants.FlashMode.torch : Camera.Constants.FlashMode.off}\n                        styles={[{ aspectRatio: 1 / 1, height: WINDOW_WIDTH }]}\n                        ratio={'1:1'}\n                        onCameraReady={onCameraReady}\n                    />\n                    : null}\n\n            </View>\n\n            <View style={[{\n                flexDirection: 'row',\n                alignItems: 'center',\n                flex: 1,\n            }]}>\n                <View>\n                    {renderCaptureControl()}\n                </View>\n\n            </View>\n        </View>\n    );\n}\n\n//CSS like styleing for the camera functionalitty.\nconst styles = StyleSheet.create({\n    closeButton: {\n        position: \"absolute\",\n        top: 35,\n        left: 15,\n        height: closeButtonSize,\n        width: closeButtonSize,\n        borderRadius: Math.floor(closeButtonSize / 2),\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"#c4c5c4\",\n        opacity: 0.7,\n        zIndex: 2,\n    },\n    media: {\n        ...StyleSheet.absoluteFillObject,\n    },\n    closeCross: {\n        width: \"68%\",\n        height: 1,\n        backgroundColor: \"black\",\n    },\n    control: {\n        position: \"absolute\",\n        flexDirection: \"row\",\n        bottom: 38,\n        width: \"100%\",\n\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    recordIndicatorContainer: {\n        flexDirection: \"row\",\n        position: \"absolute\",\n        top: 0,\n        opacity: 0.7,\n    },\n    recordTitle: {\n        fontSize: 14,\n        color: \"black\",\n        textAlign: \"center\",\n    },\n    recordDot: {\n        borderRadius: 3,\n        height: 6,\n        width: 6,\n        backgroundColor: \"#ff0000\",\n        marginHorizontal: 5,\n    },\n    text: {\n        color: \"#000000\",\n    },\n\n    capture: {\n        backgroundColor: \"red\",\n        borderRadius: 5,\n        height: captureSize,\n        width: captureSize,\n        borderRadius: Math.floor(captureSize / 2),\n        marginHorizontal: 31,\n    },\n    capturePicture: {\n        borderWidth: 6,\n        borderColor: 'gray',\n        backgroundColor: \"white\",\n        borderRadius: 5,\n        height: captureSize,\n        width: captureSize,\n        borderRadius: Math.floor(captureSize / 2),\n        marginHorizontal: 31,\n    },\n});"
        }
    ]
}