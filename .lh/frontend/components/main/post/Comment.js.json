{
    "sourceFile": "frontend/components/main/post/Comment.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1664962978567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1664962978567,
            "name": "Commit-0",
            "content": "/*Tyler Wiggins\nThis is my own work\nSenior Project 2022\nFile Description: Handles all the comments on all the posts.\n*/\nimport { FontAwesome5 } from '@expo/vector-icons';\n//import firebase from 'firebase';\nimport React, { useEffect, useState } from 'react';\nimport { FlatList, Image, Text, TextInput, TouchableOpacity, View } from 'react-native';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchUsersData, sendNotification } from '../../../redux/actions/index';\nimport { container, text, utils } from '../../styles';\nimport { timeDifference } from '../../utils';\n\nrequire('firebase/firestore')\n\n//Method that lets users comment on posts.\nfunction Comment(props) {\n    const [comments, setComments] = useState([])\n    const [postId, setPostId] = useState(\"\")\n    const [input, setInput] = useState(\"\")\n    const [refresh, setRefresh] = useState(false)\n    const [textInput, setTextInput] = useState(null)\n\n    useEffect(() => {\n        getComments();\n    }, [props.route.params.postId, props.users, refresh])\n\n    //Gets the username of the users that makes a comment.\n    const matchUserToComment = (comments) => {\n        for (let i = 0; i < comments.length; i++) {\n            if (comments[i].hasOwnProperty('user')) {\n                continue;\n            }\n\n            const user = props.users.find(x => x.uid === comments[i].creator)\n            if (user == undefined) {\n                props.fetchUsersData(comments[i].creator, false)\n            } else {\n                comments[i].user = user\n            }\n        }\n        setComments(comments)\n        setRefresh(false)\n    }\n\n    //Get comments from the firebase DB and display them on each post.\n    const getComments = () => {\n        if (props.route.params.postId !== postId || refresh) {\n            firebase.firestore()\n                .collection('posts')\n                .doc(props.route.params.uid)\n                .collection('userPosts')\n                .doc(props.route.params.postId)\n                .collection('comments')\n                .orderBy('creation', 'desc')\n                .get()\n                .then((snapshot) => {\n                    let comments = snapshot.docs.map(doc => {\n                        const data = doc.data();\n                        const id = doc.id;\n                        return { id, ...data }\n                    })\n                    matchUserToComment(comments)\n                })\n            setPostId(props.route.params.postId)\n        } else {\n            matchUserToComment(comments)\n        }\n    }\n\n    //When a user post a comment, push it to the firebase DB, then trigger a response.\n    const onCommentSend = () => {\n        const textToSend = input;\n\n        if (input.length == 0) {\n            return;\n        }\n        setInput(\"\")\n\n        textInput.clear()\n        firebase.firestore()\n            .collection('posts')\n            .doc(props.route.params.uid)\n            .collection('userPosts')\n            .doc(props.route.params.postId)\n            .collection('comments')\n            .add({\n                creator: firebase.auth().currentUser.uid,\n                text: textToSend,\n                creation: firebase.firestore.FieldValue.serverTimestamp()\n\n            }).then(() => {\n\n                setRefresh(true)\n            })\n\n        firebase.firestore()\n            .collection(\"users\")\n            .doc(props.route.params.uid)\n            .get()\n            .then((snapshot) => {\n                props.sendNotification(snapshot.data().notificationToken, \"New Comment\", `${props.currentUser.name} Commented on your post`, { type: 0, user: firebase.auth().currentUser.uid })\n            })\n\n\n    }\n\n    return (\n        //Styling formating that mahes the comments show up with a profile picture and username.\n        <View style={[container.container, container.alignItemsCenter, utils.backgroundWhite]}>\n            <FlatList\n                numColumns={1}\n                horizontal={false}\n                data={comments}\n                renderItem={({ item }) => (\n                    <View style={utils.padding10}>\n                        {item.user !== undefined ?\n                            <View style={container.horizontal}>\n                                {item.user.image == 'default' ?\n                                    (\n                                        <FontAwesome5\n                                            style={[utils.profileImageSmall]}\n                                            name=\"user-circle\" size={35} color=\"black\"\n                                            onPress={() => props.navigation.navigate(\"Profile\", { uid: item.user.uid, username: undefined })} />\n\n\n                                    )\n                                    :\n                                    (\n                                        <Image\n                                            style={[utils.profileImageSmall]}\n                                            source={{\n                                                uri: item.user.image\n                                            }}\n                                            onPress={() => props.navigation.navigate(\"Profile\", { uid: item.user.uid, username: undefined })} />\n\n                                    )\n                                }\n                                <View style={{ marginRight: 30 }}>\n                                    <Text style={[utils.margin15Right, utils.margin5Bottom, { flexWrap: 'wrap' }]}>\n\n                                        <Text style={[text.bold]}\n                                            onPress={() => props.navigation.navigate(\"Profile\", { uid: item.user.uid, username: undefined })}>\n                                            {item.user.name}\n                                        </Text>\n                                        {\" \"}  {item.text}\n                                    </Text>\n                                    <Text\n                                        style={[text.grey, text.small, utils.margin5Bottom]}>\n                                        {timeDifference(new Date(), item.creation.toDate())}\n                                    </Text>\n                                </View>\n                            </View>\n                            : null}\n                    </View>\n                )\n                }\n            />\n            <View style={[utils.borderTopGray]}>\n                < View style={[container.horizontal, utils.padding10, utils.alignItemsCenter, utils.backgroundWhite]} >\n                    {\n                        props.currentUser.image == 'default' ?\n                            (\n                                <FontAwesome5\n                                    style={[utils.profileImageSmall]}\n                                    name=\"user-circle\" size={35} color=\"black\" />\n\n                            )\n                            :\n                            (\n                                <Image\n                                    style={[utils.profileImageSmall]}\n                                    source={{\n                                        uri: props.currentUser.image\n                                    }}\n                                />\n                            )\n                    }\n                    <View style={[container.horizontal, utils.justifyCenter, utils.alignItemsCenter]}>\n                        < TextInput\n                            ref={input => { setTextInput(input) }}\n                            value={input}\n                            multiline={true}\n                            style={[container.fillHorizontal, container.input, container.container]}\n                            placeholder='comment...'\n                            onChangeText={(input) => setInput(input)} />\n\n                        < TouchableOpacity\n                            onPress={() => onCommentSend()}\n                            style={{ width: 100, alignSelf: 'center' }}>\n                            <Text style={[text.bold, text.medium, text.deepskyblue]} >Post</Text>\n                        </TouchableOpacity >\n                    </View>\n\n                </View >\n            </View>\n        </View >\n    )\n}\n\n//Mapes out the user\nconst mapStateToProps = (store) => ({\n    users: store.usersState.users,\n    currentUser: store.userState.currentUser\n})\nconst mapDispatchProps = (dispatch) => bindActionCreators({ fetchUsersData, sendNotification }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchProps)(Comment);\n"
        }
    ]
}