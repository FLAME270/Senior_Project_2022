{
    "sourceFile": "frontend/components/main/post/Feed.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1664962955259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1664962960883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n \n \n //imports\n //import firebase from 'firebase'\n+import firebase from 'firebase/compat/app';\n import React, { useEffect, useRef, useState } from 'react'\n import { FlatList, RefreshControl, Text, View } from 'react-native'\n import BottomSheet from 'react-native-bottomsheet-reanimated'\n import { TouchableOpacity } from 'react-native-gesture-handler'\n"
                }
            ],
            "date": 1664962955259,
            "name": "Commit-0",
            "content": "/*Tyler Wiggins\nThis is my own work\nSenior Project 2022\nFile Description: Every social media has a feed that shows you the newest post, this page handles the feed functionality.\n*/\n\n\n//imports\n//import firebase from 'firebase'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { FlatList, RefreshControl, Text, View } from 'react-native'\nimport BottomSheet from 'react-native-bottomsheet-reanimated'\nimport { TouchableOpacity } from 'react-native-gesture-handler'\nimport { Divider, Snackbar } from 'react-native-paper'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { deletePost, fetchFeedPosts, reload, sendNotification } from '../../../redux/actions/index'\nimport { container, utils } from '../../styles'\nimport Post from './Post'\nrequire('firebase/firestore')\n\n//The feed function is an algorithm that loads the newest post from all the people you follow.\nfunction Feed(props) {\n    //variables\n    const [posts, setPosts] = useState([]);\n    const [refreshing, setRefreshing] = useState(false)\n    const [unmutted, setUnmutted] = useState(null)\n    const [inViewPort, setInViewPort] = useState(0)\n    const [sheetRef, setSheetRef] = useState(useRef(null))\n    const [modalShow, setModalShow] = useState({ visible: false, item: null })\n    const [isValid, setIsValid] = useState(true);\n\n    useEffect(() => {\n        //if your following someone... sort the feed to show all the newest posts.\n        if (props.usersFollowingLoaded == props.following.length && props.following.length !== 0) {\n            props.feed.sort(function (x, y) {\n                return y.creation.toDate() - x.creation.toDate();\n            })\n\n            setPosts(props.feed);\n            setRefreshing(false)\n            for (let i = 0; i < props.feed.length; i++) {\n                if (props.feed[i].type == 0) {\n                    setUnmutted(i)\n                    return;\n                }\n            }\n        }\n        props.navigation.setParams({ param: \"value\" })\n\n    }, [props.usersFollowingLoaded, props.feed])\n\n    //If the post is changed or deleted, load the next post.\n    const onViewableItemsChanged = useRef(({ viewableItems, changed }) => {\n        if (changed && changed.length > 0) {\n            setInViewPort(changed[0].index);\n        }\n    })\n//if there is no posts, simply return home page.\n    if (posts.length == 0) {\n        return (<View />)\n    }\n\n    //if the sheet/page is not visable resize and refresh the page.\n    if (sheetRef.current !== null) {\n        if (modalShow.visible) {\n            sheetRef.snapTo(0)\n        } else {\n            sheetRef.snapTo(1)\n        }\n    }\n    return (\n        //Styleing for the feed\n        <View style={[container.container, utils.backgroundWhite]}>\n{/* Loads mor post when the page is refreshed. */}\n            <FlatList\n                refreshControl={\n                    <RefreshControl\n                        refreshing={refreshing}\n                        onRefresh={() => {\n                            setRefreshing(true);\n                            props.reload()\n                        }}\n                    />\n                }\n                onViewableItemsChanged={onViewableItemsChanged.current}\n                viewabilityConfig={{\n                    waitForInteraction: false,\n                    viewAreaCoveragePercentThreshold: 70\n                }}\n                numColumns={1}\n                horizontal={false}\n                data={posts}\n                keyExtractor={(item, index) => index.toString()}\n\n                renderItem={({ item, index }) => (\n                    <View key={index}>\n                        <Post route={{ params: { user: item.user, item, index, unmutted, inViewPort, setUnmuttedMain: setUnmutted, setModalShow, feed: true } }} navigation={props.navigation} />\n                    </View>\n                )}\n            />\n\n            <BottomSheet\n                bottomSheerColor=\"#FFFFFF\"\n                ref={setSheetRef}\n                initialPosition={0} //200, 300\n                snapPoints={[300, 0]}\n                isBackDrop={true}\n                isBackDropDismissByPress={true}\n                isRoundBorderWithTipHeader={true}\n                backDropColor=\"black\"\n                isModal\n                containerStyle={{ backgroundColor: \"white\" }}\n                tipStyle={{ backgroundColor: \"white\" }}\n                headerStyle={{ backgroundColor: \"white\", flex: 1 }}\n                bodyStyle={{ backgroundColor: \"white\", flex: 1, borderRadius: 20 }}\n                body={\n\n                    //Show a modal with your username and if you own the post, a delete option willbe shown.\n                    <View>\n                        {modalShow.item != null ?\n                            <View>\n                                <TouchableOpacity style={{ padding: 20 }}\n                                    onPress={() => {\n                                        props.navigation.navigate(\"ProfileOther\", { uid: modalShow.item.user.uid, username: undefined });\n                                        setModalShow({ visible: false, item: null });\n                                    }}>\n                                    <Text >Profile</Text>\n                                </TouchableOpacity>\n                                <Divider />\n                                {modalShow.item.creator == firebase.auth().currentUser.uid ?\n                                    <TouchableOpacity style={{ padding: 20 }}\n                                        onPress={() => {\n                                            props.deletePost(modalShow.item).then(() => {\n                                                setRefreshing(true);\n                                                props.reload()\n                                            })\n                                            setModalShow({ visible: false, item: null });\n                                        }}>\n                                        <Text >Delete</Text>\n                                    </TouchableOpacity>\n                                    : null}\n\n                                <Divider />\n                                <TouchableOpacity style={{ padding: 20 }} onPress={() => setModalShow({ visible: false, item: null })}>\n                                    <Text >Cancel</Text>\n                                </TouchableOpacity>\n                            </View>\n                            : null}\n\n                    </View>\n                }\n            />\n            <Snackbar\n                visible={isValid.boolSnack}\n                duration={2000}\n                onDismiss={() => { setIsValid({ boolSnack: false }) }}>\n                {isValid.message}\n            </Snackbar>\n        </View>\n\n    )\n}\n\n//Maps the users activity\nconst mapStateToProps = (store) => ({\n    currentUser: store.userState.currentUser,\n    following: store.userState.following,\n    feed: store.usersState.feed,\n    usersFollowingLoaded: store.usersState.usersFollowingLoaded,\n})\n\nconst mapDispatchProps = (dispatch) => bindActionCreators({ reload, sendNotification, fetchFeedPosts, deletePost }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchProps)(Feed);\n"
        }
    ]
}