{
    "sourceFile": "frontend/components/main/post/Post.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1664962924554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1664962924554,
            "name": "Commit-0",
            "content": "/*Tyler Wiggins\nThis is my own work\nSenior Project 2022\nFile Description: This file has the functionality for the user to create a post.\n*/\nimport { Entypo, Feather, FontAwesome5 } from '@expo/vector-icons';\nimport { useIsFocused } from '@react-navigation/native';\nimport { Video } from 'expo-av';\nimport VideoPlayer from 'expo-video-player';\n//import firebase from 'firebase';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { deletePost, fetchUserPosts, sendNotification } from '../../../redux/actions/index';\nimport { container, text, utils } from '../../styles';\nimport { timeDifference } from '../../utils';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Dimensions, Image, Text, TouchableOpacity, View } from 'react-native';\nimport BottomSheet from 'react-native-bottomsheet-reanimated';\nimport { Divider, Snackbar } from 'react-native-paper';\nimport ParsedText from 'react-native-parsed-text';\nimport CachedImage from '../random/CachedImage';\nrequire('firebase/firestore')\n\n\n//Sets a default screen size\nconst WINDOW_WIDTH = Dimensions.get(\"window\").width;\n\n//function to handle the functionality to make a post.\nfunction Post(props) {\n    //variables\n    const [item, setItem] = useState(props.route.params.item)\n    const [user, setUser] = useState(props.route.params.user)\n    const [currentUserLike, setCurrentUserLike] = useState(false)\n    const [unmutted, setUnmutted] = useState(true)\n    const [videoref, setvideoref] = useState(null)\n    const [sheetRef, setSheetRef] = useState(useRef(null))\n    const [modalShow, setModalShow] = useState({ visible: false, item: null })\n    const [isValid, setIsValid] = useState(true);\n    const [exists, setExists] = useState(false);\n    const [loaded, setLoaded] = useState(false);\n    const isFocused = useIsFocused();\n\n    useEffect(() => {\n\n        //If a user gets a notification about a post, this finds it in the DB and displays it.\n        if (props.route.params.notification != undefined) {\n            firebase.firestore()\n                .collection(\"users\")\n                .doc(props.route.params.user)\n                .get()\n                .then((snapshot) => {\n                    if (snapshot.exists) {\n                        let user = snapshot.data();\n                        user.uid = snapshot.id;\n                        setUser(user)\n                    }\n                })\n            firebase.firestore()\n                .collection(\"posts\")\n                .doc(props.route.params.user)\n                .collection(\"userPosts\")\n                .doc(props.route.params.item)\n                .get()\n                .then((snapshot) => {\n                    if (snapshot.exists) {\n                        let post = snapshot.data();\n                        post.id = snapshot.id;\n                        setItem(post)\n                        setLoaded(true)\n                        setExists(true)\n                    }\n                })\n            firebase.firestore()\n                .collection(\"posts\")\n                .doc(props.route.params.user)\n                .collection(\"userPosts\")\n                .doc(props.route.params.item)\n                .collection(\"likes\")\n                .doc(firebase.auth().currentUser.uid)\n                .onSnapshot((snapshot) => {\n                    let currentUserLike = false;\n                    if (snapshot.exists) {\n                        currentUserLike = true;\n                    }\n                    setCurrentUserLike(currentUserLike)\n\n                })\n\n        }\n        else {\n            firebase.firestore()\n                .collection(\"posts\")\n                .doc(props.route.params.user.uid)\n                .collection(\"userPosts\")\n                .doc(props.route.params.item.id)\n                .collection(\"likes\")\n                .doc(firebase.auth().currentUser.uid)\n                .onSnapshot((snapshot) => {\n                    let currentUserLike = false;\n                    if (snapshot.exists) {\n                        currentUserLike = true;\n                    }\n                    setCurrentUserLike(currentUserLike)\n\n                })\n\n            setItem(props.route.params.item)\n            setUser(props.route.params.user)\n            setLoaded(true)\n            setExists(true)\n        }\n\n    }, [props.route.params.notification, props.route.params.item])\n\n    useEffect(() => {\n        //if the video is muted, mute the volum, else unmute it\n        if (videoref !== null) {\n            videoref.setIsMutedAsync(props.route.params.unmutted)\n        }\n        setUnmutted(props.route.params.unmutted)\n    }, [props.route.params.unmutted])\n\n    //Determines if the video is playing or paused.\n    useEffect(() => {\n        if (videoref !== null) {\n            if (isFocused) {\n                videoref.playAsync()\n            } else {\n                videoref.stopAsync()\n\n            }\n        }\n\n    }, [props.route.params.index, props.route.params.inViewPort])\n\n    //if a user presses your username, it loads your profile.\n    const onUsernamePress = (username, matchIndex) => {\n        props.navigation.navigate(\"ProfileOther\", { username, uid: undefined })\n    }\n\n    //If someone likes a post, it will be documented in the firebase DB.\n    const onLikePress = (userId, postId, item) => {\n        item.likesCount += 1;\n        setCurrentUserLike(true)\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(userId)\n            .collection(\"userPosts\")\n            .doc(postId)\n            .collection(\"likes\")\n            .doc(firebase.auth().currentUser.uid)\n            .set({})\n            .then()\n        props.sendNotification(user.notificationToken, \"New Like\", `${props.currentUser.name} liked your post`, { type: 0, postId, user: firebase.auth().currentUser.uid })\n\n    }\n\n    // if someone un-liked your post, remove the like from the DB.\n    const onDislikePress = (userId, postId, item) => {\n        item.likesCount -= 1;\n\n        setCurrentUserLike(false)\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(userId)\n            .collection(\"userPosts\")\n            .doc(postId)\n            .collection(\"likes\")\n            .doc(firebase.auth().currentUser.uid)\n            .delete()\n    }\n    //if the post was deleted or does not load, give an error message.\n    if (!exists && loaded) {\n        return (\n            <View style={{ height: '100%', justifyContent: 'center', margin: 'auto' }}>\n                <FontAwesome5 style={{ alignSelf: 'center', marginBottom: 20 }} name=\"dizzy\" size={40} color=\"black\" />\n                <Text style={[text.notAvailable]}>Post does not exist</Text>\n            </View>\n        )\n    }\n    if (!loaded) {\n        return (<View></View>)\n\n    }\n    //Check if the user is authenticated.\n    if (user == undefined) {\n        return (<View></View>)\n    }\n    if (item == null) {\n        return (<View />)\n    }\n\n    //references the video component.\n    const _handleVideoRef = (component) => {\n        setvideoref(component);\n\n        if (component !== null) {\n            component.setIsMutedAsync(props.route.params.unmutted)\n        }\n    }\n\n    //if there is no video reference play with volume unmuted.\n    if (videoref !== null) {\n        videoref.setIsMutedAsync(unmutted)\n        if (isFocused && props.route.params.index == props.route.params.inViewPort) {\n            videoref.playAsync()\n        } else {\n            videoref.stopAsync()\n\n        }\n    }\n\n//Show a modal that displays a post.\n    if (sheetRef.current !== null && !props.route.params.feed) {\n        if (modalShow.visible) {\n            sheetRef.snapTo(0)\n        } else {\n            sheetRef.snapTo(1)\n        }\n    }\n\n    return (\n        //View that displays a single post on the feed.\n        <View style={[container.container, utils.backgroundWhite]}>\n\n            <View>\n                <View style={[container.horizontal, { alignItems: 'center', padding: 10 }]}>\n                    <TouchableOpacity\n                        style={[container.horizontal, { alignItems: 'center' }]}\n                        onPress={() => props.navigation.navigate(\"ProfileOther\", { uid: user.uid, username: undefined })}>\n{/* Profile picture and username that is clickable. */}\n                        {user.image == 'default' ?\n                            (\n                                <FontAwesome5\n                                    style={[utils.profileImageSmall]}\n                                    name=\"user-circle\" size={35} color=\"black\" />\n\n                            )\n                            :\n                            (\n                                <Image\n                                    style={[utils.profileImageSmall]}\n                                    source={{\n                                        uri: user.image\n                                    }}\n                                />\n                            )\n                        }\n                        <View style={{ alignSelf: 'center' }}>\n                            <Text style={[text.bold, text.medium, { marginBottom: 0 }]} >{user.name}</Text>\n                        </View>\n\n                    </TouchableOpacity>\n\n                    <TouchableOpacity\n                        style={[{ marginLeft: 'auto' }]}\n\n                        onPress={() => {\n                            if (props.route.params.feed) {\n                                props.route.params.setModalShow({ visible: true, item })\n                            } else {\n                                setModalShow({ visible: true, item })\n                            }\n                        }}>\n                        <Feather\n                            name=\"more-vertical\" size={20} color=\"black\" />\n                    </TouchableOpacity>\n                </View>\n                {/* If the item type is a video, determin the screen size and play the video. */}\n                {item.type == 0 ?\n                    <View>\n                        {props.route.params.index == props.route.params.inViewPort && isFocused ?\n                            <View>\n                                <VideoPlayer\n                                    videoProps={{\n                                        isLooping: true,\n                                        shouldPlay: true,\n                                        resizeMode: Video.RESIZE_MODE_COVER,\n                                        source: {\n                                            uri: item.downloadURL,\n                                        },\n                                        videoRef: _handleVideoRef,\n                                    }}\n                                    inFullscreen={false}\n                                    showControlsOnLoad={true}\n                                    showFullscreenButton={false}\n                                    height={WINDOW_WIDTH}\n                                    width={WINDOW_WIDTH}\n                                    shouldPlay={true}\n                                    isLooping={true}\n                                    style={{\n                                        aspectRatio: 1 / 1, height: WINDOW_WIDTH,\n                                        width: WINDOW_WIDTH, backgroundColor: 'black'\n                                    }}\n                                />\n{/* Controls the volume and styleing */}\n                                <TouchableOpacity\n                                    style={{ position: 'absolute', borderRadius: 500, backgroundColor: 'black', width: 40, height: 40, alignItems: 'center', justifyContent: 'center', margin: 10, right: 0 }}\n                                    activeOpacity={1}\n                                    onPress={() => {\n                                        if (videoref == null) {\n                                            return;\n                                        }\n                                        if (unmutted) {\n                                            if (props.route.params.setUnmuttedMain == undefined) {\n                                                setUnmutted(false)\n                                            } else {\n                                                props.route.params.setUnmuttedMain(false)\n\n                                            }\n\n                                        } else {\n                                            if (props.route.params.setUnmuttedMain == undefined) {\n                                                setUnmutted(true)\n                                            } else {\n                                                props.route.params.setUnmuttedMain(true)\n\n                                            }\n\n                                        }\n\n                                    }}>\n                                    {!unmutted ?\n\n                                        <Feather name=\"volume-2\" size={20} color=\"white\" />\n                                        :\n                                        <Feather name=\"volume-x\" size={20} color=\"white\" />\n                                    }\n                                </TouchableOpacity>\n\n                            </View>\n\n                            :\n                            //Adds the video/image to the cache.\n                            <View style={{ marginTop: 4 }}>\n\n                                <CachedImage\n                                    cacheKey={item.id}\n                                    style={[container.image]}\n                                    source={{ uri: item.downloadURLStill }}\n                                />\n                            </View>\n                        }\n\n                    </View>\n\n                    :\n\n                    <CachedImage\n                        cacheKey={item.id}\n                        style={container.image}\n                        source={{ uri: item.downloadURL }}\n                    />\n                }\n\n{/* Below the image or video, this will display a heart for like. Once the heart is clicked, the number of current likes is increased. */}\n                <View style={[utils.padding10, container.horizontal]}>\n                    {currentUserLike ?\n                        (\n                            <Entypo name=\"heart\" size={30} color=\"red\" onPress={() => onDislikePress(user.uid, item.id, item)} />\n                        )\n                        :\n                        (\n                            <Feather name=\"heart\" size={30} color=\"black\" onPress={() => onLikePress(user.uid, item.id, item)} />\n\n                        )\n                    }\n\n                    {/* Message textbox that lets you add comments when clicked on. */}\n                    <Feather style={utils.margin15Left} name=\"message-square\" size={30} color=\"black\" onPress={() => props.navigation.navigate('Comment', { postId: item.id, uid: user.uid, user })} />\n                    <Feather style={utils.margin15Left} name=\"share\" size={26} color=\"black\" onPress={() => props.navigation.navigate('ChatList', { postId: item.id, post: { ...item, user: user }, share: true })} />\n\n\n                </View>\n                {/* Displays the number of likes the post has. */}\n                <View style={[container.container, utils.padding10Sides]}>\n                    <Text style={[text.bold, text.medium]}>\n                        {item.likesCount} likes\n                    </Text>\n\n                    {/* Display the username and profile of the people who comments on a users post. */}\n                    <Text style={[utils.margin15Right, utils.margin5Bottom]}>\n                        <Text style={[text.bold]}\n                            onPress={() => props.navigation.navigate(\"ProfileOther\", { uid: user.uid, username: undefined })}>\n                            {user.name}\n                        </Text>\n\n                        <Text>    </Text>\n                        <ParsedText\n                            parse={\n                                [\n                                    { pattern: /@(\\w+)/, style: { color: 'green', fontWeight: 'bold' }, onPress: onUsernamePress },\n                                ]\n                            }\n                        >{item.caption}</ParsedText>\n                    </Text>\n                    <Text\n                        style={[text.grey, utils.margin5Bottom]} onPress={() => props.navigation.navigate('Comment', { postId: item.id, uid: user.uid, user })}>\n                        View all {item.commentsCount} Comments\n                    </Text>\n                    <Text\n                        style={[text.grey, text.small, utils.margin5Bottom]}>\n                        {timeDifference(new Date(), item.creation.toDate())}\n                    </Text>\n                </View>\n            </View>\n\n{/* Bottom sheet that lets you delete, go to your profile, cancel, or edit your posts */}\n            <BottomSheet\n                bottomSheerColor=\"#FFFFFF\"\n                ref={setSheetRef}\n                initialPosition={0} //200, 300\n                snapPoints={[300, 0]}\n                isBackDrop={true}\n                isBackDropDismissByPress={true}\n                isRoundBorderWithTipHeader={true}\n                backDropColor=\"black\"\n                isModal\n                containerStyle={{ backgroundColor: \"white\" }}\n                tipStyle={{ backgroundColor: \"white\" }}\n                headerStyle={{ backgroundColor: \"white\", flex: 1 }}\n                bodyStyle={{ backgroundColor: \"white\", flex: 1, borderRadius: 20 }}\n                body={\n\n                    <View>\n\n                        {modalShow.item != null ?\n                            <View>\n                                <TouchableOpacity style={{ padding: 20 }}\n                                    onPress={() => {\n                                        props.navigation.navigate(\"ProfileOther\", { uid: modalShow.item.user.uid, username: undefined });\n                                        setModalShow({ visible: false, item: null });\n                                    }}>\n                                    <Text >Profile</Text>\n                                </TouchableOpacity>\n                                <Divider />\n                                {props.route.params.user.uid == firebase.auth().currentUser.uid ?\n                                    <TouchableOpacity style={{ padding: 20 }}\n                                        onPress={() => {\n                                            props.deletePost(modalShow.item).then(() => {\n                                                props.fetchUserPosts()\n                                                props.navigation.popToTop()\n                                            })\n                                            setModalShow({ visible: false, item: null });\n                                        }}>\n                                        <Text >Delete</Text>\n                                    </TouchableOpacity>\n                                    : null}\n\n                                <Divider />\n                                <TouchableOpacity style={{ padding: 20 }} onPress={() => setModalShow({ visible: false, item: null })}>\n                                    <Text >Cancel</Text>\n                                </TouchableOpacity>\n                            </View>\n                            : null}\n\n                    </View>\n                }\n            />\n            <Snackbar\n                visible={isValid.boolSnack}\n                duration={2000}\n                onDismiss={() => { setIsValid({ boolSnack: false }) }}>\n                {isValid.message}\n            </Snackbar>\n        </View>\n    )\n}\n\nconst mapStateToProps = (store) => ({\n    currentUser: store.userState.currentUser,\n    following: store.userState.following,\n    feed: store.usersState.feed,\n    usersFollowingLoaded: store.usersState.usersFollowingLoaded,\n})\n\nconst mapDispatchProps = (dispatch) => bindActionCreators({ sendNotification, fetchUserPosts, deletePost }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchProps)(Post);\n"
        }
    ]
}