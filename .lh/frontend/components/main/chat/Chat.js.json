{
    "sourceFile": "frontend/components/main/chat/Chat.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1664962879067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1664962884609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n */\n \n import { FontAwesome5 } from '@expo/vector-icons';\n //import firebase from 'firebase';\n+import firebase from 'firebase/compat/app';\n import React, { useEffect, useState } from 'react';\n import { FlatList, Image, Text, TextInput, TouchableOpacity, View } from 'react-native';\n import CachedImage from 'react-native-expo-cached-image';\n import { Provider } from 'react-native-paper';\n"
                },
                {
                    "date": 1668734100368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n /*Tyler Wiggins\n This chat code is not mine and is here for learning pourposes only\n Source: https://youtu.be/pKYafltwJ4E\n Senior Project 2022\n-File Description:\n+File Description: LEts users chat to other users.\n */\n \n import { FontAwesome5 } from '@expo/vector-icons';\n //import firebase from 'firebase';\n@@ -58,8 +58,9 @@\n         if (initialFetch) {\n             return;\n         }\n \n+        //Search for a chat method.\n         const chat = props.chats.find(el => el.users.includes(user.uid));\n         setChat(chat)\n \n \n@@ -116,8 +117,9 @@\n             createChat()\n         }\n     }, [user, props.chats])\n \n+    //Makes a new chat and adds the chat to the database.\n     const createChat = () => {\n         firebase.firestore()\n             .collection(\"chats\")\n             .add({\n@@ -127,8 +129,10 @@\n             }).then(() => {\n                 props.fetchUserChats()\n             })\n     }\n+\n+    //Sends a message in the chat to the database.\n     const onSend = () => {\n         const textToSend = input;\n         if (chat == undefined) {\n             return;\n"
                }
            ],
            "date": 1664962879067,
            "name": "Commit-0",
            "content": "/*Tyler Wiggins\nThis chat code is not mine and is here for learning pourposes only\nSource: https://youtu.be/pKYafltwJ4E\nSenior Project 2022\nFile Description:\n*/\n\nimport { FontAwesome5 } from '@expo/vector-icons';\n//import firebase from 'firebase';\nimport React, { useEffect, useState } from 'react';\nimport { FlatList, Image, Text, TextInput, TouchableOpacity, View } from 'react-native';\nimport CachedImage from 'react-native-expo-cached-image';\nimport { Provider } from 'react-native-paper';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { fetchFeedPosts, fetchUserChats, sendNotification } from '../../../redux/actions/index';\nimport { container, text, utils } from '../../styles';\nimport { timeDifference } from '../../utils';\nrequire('firebase/firestore')\n\n\nfunction Chat(props) {\n    const [user, setUser] = useState(null)\n    const [chat, setChat] = useState(null)\n    const [messages, setMessages] = useState([])\n    const [input, setInput] = useState(\"\")\n    const [textInput, setTextInput] = useState(null)\n    const [flatList, setFlatList] = useState(null)\n    const [initialFetch, setInitialFetch] = useState(false)\n\n    useEffect(() => {\n        if (props.route.params.notification) {\n            firebase.firestore()\n                .collection(\"users\")\n                .doc(props.route.params.user)\n                .get()\n                .then((snapshot) => {\n                    if (snapshot.exists) {\n                        let user = snapshot.data();\n                        user.uid = snapshot.id;\n\n                        setUser(user)\n                    }\n                })\n        }\n        else {\n            setUser(props.route.params.user)\n        }\n\n    }, [props.route.params.notification, props.route.params.user])\n\n\n    useEffect(() => {\n        if (user == null) {\n            return;\n        }\n        if (initialFetch) {\n            return;\n        }\n\n        const chat = props.chats.find(el => el.users.includes(user.uid));\n        setChat(chat)\n\n\n        props.navigation.setOptions({\n            headerTitle: () => (\n                <View style={[container.horizontal, utils.alignItemsCenter, { overflow: 'hidden' }]}>\n                    {\n                        user.image == 'default' ?\n                            (\n                                <FontAwesome5\n                                    style={[utils.profileImageSmall]}\n                                    name=\"user-circle\" size={35} color=\"black\" />\n\n                            )\n                            :\n                            (\n                                <Image\n                                    style={[utils.profileImageSmall]}\n                                    source={{\n                                        uri: user.image\n                                    }}\n                                />\n                            )\n                    }\n                    <Text style={[text.bold, text.large, { flex: 1 }]} numberOfLines={1} ellipsizeMode='tail'>{props.route.params.user.username}</Text>\n                </View>\n            ),\n        });\n        if (chat !== undefined) {\n            firebase.firestore()\n                .collection(\"chats\")\n                .doc(chat.id)\n                .collection(\"messages\")\n                .orderBy(\"creation\", \"asc\")\n                .onSnapshot((snapshot) => {\n\n                    let messages = snapshot.docs.map(doc => {\n                        const data = doc.data();\n                        const id = doc.id;\n                        return { id, ...data }\n                    })\n                    setMessages(messages)\n                })\n\n            firebase.firestore()\n                .collection('chats')\n                .doc(chat.id)\n                .update({\n                    [firebase.auth().currentUser.uid]: true,\n                })\n            setInitialFetch(true)\n\n        } else {\n            createChat()\n        }\n    }, [user, props.chats])\n\n    const createChat = () => {\n        firebase.firestore()\n            .collection(\"chats\")\n            .add({\n                users: [firebase.auth().currentUser.uid, user.uid],\n                lastMessage: 'Send the first message',\n                lastMessageTimestamp: firebase.firestore.FieldValue.serverTimestamp()\n            }).then(() => {\n                props.fetchUserChats()\n            })\n    }\n    const onSend = () => {\n        const textToSend = input;\n        if (chat == undefined) {\n            return;\n        }\n\n        if (input.length == 0) {\n            return;\n        }\n        setInput(\"\")\n\n\n        textInput.clear()\n\n        firebase.firestore()\n            .collection('chats')\n            .doc(chat.id)\n            .collection('messages')\n            .add({\n                creator: firebase.auth().currentUser.uid,\n                text: textToSend,\n                creation: firebase.firestore.FieldValue.serverTimestamp()\n            })\n\n        firebase.firestore()\n            .collection('chats')\n            .doc(chat.id)\n            .update({\n                lastMessage: textToSend,\n                lastMessageTimestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                [chat.users[0]]: false,\n                [chat.users[1]]: false\n\n            })\n\n        props.sendNotification(user.notificationToken, \"New Message\", textToSend, { type: \"chat\", user: firebase.auth().currentUser.uid })\n\n\n    }\n\n    return (\n        <View style={[container.container, container.alignItemsCenter, utils.backgroundWhite]}>\n            <Provider>\n\n                <FlatList\n                    numColumns={1}\n                    horizontal={false}\n                    data={messages}\n                    ref={setFlatList}\n                    onContentSizeChange={() => { if (flatList != null) flatList.scrollToEnd({ animated: true }) }}\n\n                    renderItem={({ item }) => (\n                        <View style={[utils.padding10, container.container, item.creator == firebase.auth().currentUser.uid ? container.chatRight : container.chatLeft]}>\n                            {item.creator !== undefined && item.creation !== null ?\n                                <View style={container.horizontal}>\n                                    <View>\n                                        <Text style={[utils.margin5Bottom, text.white]}>\n                                            {item.text}\n                                        </Text>\n                                        {item.post != null ?\n\n                                            <TouchableOpacity style={{ marginBottom: 20, marginTop: 10 }} onPress={() => { props.navigation.navigate(\"Post\", { item: item.post, user: item.post.user }) }}>\n                                                {item.post.type == 0 ?\n                                                    <CachedImage\n                                                        cacheKey={item.id}\n                                                        style={{ aspectRatio: 1 / 1, width: 200 }}\n                                                        source={{ uri: item.post.downloadURLStill }}\n                                                    />\n                                                    :\n\n                                                    <CachedImage\n                                                        cacheKey={item.id}\n                                                        style={{ aspectRatio: 1 / 1, width: 200 }}\n                                                        source={{ uri: item.post.downloadURL }}\n                                                    />\n                                                }\n                                            </TouchableOpacity>\n                                            : null}\n                                        <Text\n                                            style={[text.grey, text.small, utils.margin5Bottom, text.whitesmoke]}>\n                                            {timeDifference(new Date(), item.creation.toDate())}\n                                        </Text>\n                                    </View>\n                                </View>\n                                : null}\n\n\n                        </View>\n                    )\n                    }\n                />\n\n\n                < View style={[container.horizontal, utils.padding10, utils.alignItemsCenter, utils.backgroundWhite, utils.borderTopGray]} >\n                    {\n                        props.currentUser.image == 'default' ?\n                            (\n                                <FontAwesome5\n                                    style={[utils.profileImageSmall]}\n                                    name=\"user-circle\" size={35} color=\"black\" />\n\n                            )\n                            :\n                            (\n                                <Image\n                                    style={[utils.profileImageSmall]}\n                                    source={{\n                                        uri: props.currentUser.image\n                                    }}\n                                />\n                            )\n                    }\n\n\n                    <View style={[container.horizontal, utils.justifyCenter, utils.alignItemsCenter]}>\n                        < TextInput\n                            ref={input => { setTextInput(input) }}\n                            value={input}\n                            multiline={true}\n                            style={[container.fillHorizontal, container.input, container.container]}\n                            placeholder='message...'\n                            onChangeText={(input) => setInput(input)} />\n\n                        < TouchableOpacity\n                            onPress={() => onSend()}\n                            style={{ width: 100, alignSelf: 'center' }}>\n                            <Text style={[text.bold, text.medium, text.deepskyblue]} >Send</Text>\n                        </TouchableOpacity >\n                    </View>\n                </View >\n            </Provider>\n\n        </View >\n\n    )\n}\n\nconst mapStateToProps = (store) => ({\n    currentUser: store.userState.currentUser,\n    chats: store.userState.chats,\n    following: store.userState.following,\n    feed: store.usersState.feed,\n\n})\nconst mapDispatchProps = (dispatch) => bindActionCreators({ fetchUserChats, sendNotification, fetchFeedPosts }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchProps)(Chat);\n"
        }
    ]
}