{
    "sourceFile": "frontend/redux/actions/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1664960233259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1664963045744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import * as Notifications from 'expo-notifications';\n-import firebase from 'firebase/';\n+//import firebase from 'firebase/';\n import { Constants } from 'react-native-unimodules';\n import { CLEAR_DATA, USERS_DATA_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USER_CHATS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_STATE_CHANGE } from '../constants/index';\n require('firebase/firestore')\n \n"
                },
                {
                    "date": 1664963091621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import * as Notifications from 'expo-notifications';\n //import firebase from 'firebase/';\n+import firebase from 'firebase/compat/app';\n import { Constants } from 'react-native-unimodules';\n import { CLEAR_DATA, USERS_DATA_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USER_CHATS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_STATE_CHANGE } from '../constants/index';\n require('firebase/firestore')\n \n"
                },
                {
                    "date": 1668736002234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+\n import * as Notifications from 'expo-notifications';\n //import firebase from 'firebase/';\n import firebase from 'firebase/compat/app';\n import { Constants } from 'react-native-unimodules';\n"
                },
                {
                    "date": 1668736009229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,9 @@\n-\n+/*Tyler Wiggins\n+This is my own work\n+Senior Project 2022\n+File Description: ity of the entire application.\n+*/\n import * as Notifications from 'expo-notifications';\n //import firebase from 'firebase/';\n import firebase from 'firebase/compat/app';\n import { Constants } from 'react-native-unimodules';\n"
                },
                {
                    "date": 1668736030756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n /*Tyler Wiggins\n This is my own work\n Senior Project 2022\n-File Description: Reduc.\n+File Description: Redu.\n */\n import * as Notifications from 'expo-notifications';\n //import firebase from 'firebase/';\n import firebase from 'firebase/compat/app';\n"
                },
                {
                    "date": 1668736499240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         dispatch({ type: CLEAR_DATA })\n     })\n }\n \n-\n+/\n export function reload() {\n     return ((dispatch) => {\n         dispatch(clearData())\n         dispatch(fetchUser())\n"
                }
            ],
            "date": 1664960233259,
            "name": "Commit-0",
            "content": "import * as Notifications from 'expo-notifications';\nimport firebase from 'firebase/';\nimport { Constants } from 'react-native-unimodules';\nimport { CLEAR_DATA, USERS_DATA_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USER_CHATS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_STATE_CHANGE } from '../constants/index';\nrequire('firebase/firestore')\n\n\nlet unsubscribe = [];\n\nexport function clearData() {\n    return ((dispatch) => {\n        for (let i = unsubscribe; i < unsubscribe.length; i++) {\n            unsubscribe[i]();\n        }\n        dispatch({ type: CLEAR_DATA })\n    })\n}\nexport function reload() {\n    return ((dispatch) => {\n        dispatch(clearData())\n        dispatch(fetchUser())\n        dispatch(setNotificationService())\n        dispatch(fetchUserPosts())\n        dispatch(fetchUserFollowing())\n        dispatch(fetchUserChats())\n\n    })\n}\n\nexport const setNotificationService = () => async dispatch => {\n    let token;\n    if (Constants.isDevice) {\n        const existingStatus = await Notifications.getPermissionsAsync();\n        let finalStatus = existingStatus;\n        if (existingStatus.status !== 'granted') {\n            const status = await Notifications.requestPermissionsAsync();\n            finalStatus = status;\n        }\n\n        if (finalStatus.status !== 'granted') {\n            alert('Failed to get push token for push notification!');\n            return;\n        }\n        token = (await Notifications.getExpoPushTokenAsync());\n    } else {\n        alert('Must use physical device for Push Notifications');\n    }\n\n    if (Platform.OS === 'android') {\n        Notifications.setNotificationChannelAsync('default', {\n            name: 'default',\n            importance: Notifications.AndroidImportance.MAX,\n            vibrationPattern: [0, 250, 250, 250],\n            lightColor: '#FF231F7C',\n        });\n    }\n\n    Notifications.setNotificationHandler({\n        handleNotification: async () => ({\n            shouldShowAlert: true,\n            shouldPlaySound: false,\n            shouldSetBadge: false,\n        }),\n    });\n\n    if (token != undefined) {\n        firebase.firestore()\n            .collection(\"users\")\n            .doc(firebase.auth().currentUser.uid)\n            .update({\n                notificationToken: token.data,\n            })\n    }\n\n}\n\nexport const sendNotification = (to, title, body, data) => dispatch => {\n    if (to == null) {\n        return;\n    }\n\n    let response = fetch('https://exp.host/--/api/v2/push/send', {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            to,\n            sound: 'default',\n            title,\n            body,\n            data\n        })\n    })\n\n}\n\nexport function fetchUser() {\n    return ((dispatch) => {\n        let listener = firebase.firestore()\n            .collection(\"users\")\n            .doc(firebase.auth().currentUser.uid)\n            .onSnapshot((snapshot, error) => {\n                if (snapshot.exists) {\n                    dispatch({ type: USER_STATE_CHANGE, currentUser: { uid: firebase.auth().currentUser.uid, ...snapshot.data() } })\n                }\n            })\n        unsubscribe.push(listener)\n    })\n}\n\nexport function fetchUserChats() {\n    return ((dispatch) => {\n        let listener = firebase.firestore()\n            .collection(\"chats\")\n            .where(\"users\", \"array-contains\", firebase.auth().currentUser.uid)\n            .orderBy(\"lastMessageTimestamp\", \"desc\")\n            .onSnapshot((snapshot) => {\n                let chats = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data }\n                })\n\n                for (let i = 0; i < chats.length; i++) {\n                    let otherUserId;\n                    if (chats[i].users[0] == firebase.auth().currentUser.uid) {\n                        otherUserId = chats[i].users[1];\n                    } else {\n                        otherUserId = chats[i].users[0];\n                    }\n                    dispatch(fetchUsersData(otherUserId, false))\n                }\n\n                dispatch({ type: USER_CHATS_STATE_CHANGE, chats })\n            })\n        unsubscribe.push(listener)\n    })\n}\nexport function fetchUserPosts() {\n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"desc\")\n            .get()\n            .then((snapshot) => {\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data }\n                })\n                dispatch({ type: USER_POSTS_STATE_CHANGE, posts })\n            })\n    })\n}\n\n\nexport function fetchUserFollowing() {\n    return ((dispatch) => {\n        let listener = firebase.firestore()\n            .collection(\"following\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userFollowing\")\n            .onSnapshot((snapshot) => {\n                let following = snapshot.docs.map(doc => {\n                    const id = doc.id;\n                    return id\n                })\n                dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following });\n                for (let i = 0; i < following.length; i++) {\n                    dispatch(fetchUsersData(following[i], true));\n                }\n            })\n        unsubscribe.push(listener)\n    })\n}\n\nexport function fetchUsersData(uid, getPosts) {\n    return ((dispatch, getState) => {\n        const found = getState().usersState.users.some(el => el.uid === uid);\n        if (!found) {\n            firebase.firestore()\n                .collection(\"users\")\n                .doc(uid)\n                .get()\n                .then((snapshot) => {\n                    if (snapshot.exists) {\n                        let user = snapshot.data();\n                        user.uid = snapshot.id;\n\n                        dispatch({ type: USERS_DATA_STATE_CHANGE, user });\n                    }\n                })\n            if (getPosts) {\n                dispatch(fetchUsersFollowingPosts(uid));\n            }\n        }\n    })\n}\n\nexport function fetchUsersFollowingPosts(uid) {\n    return ((dispatch, getState) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                const uid = snapshot.docs[0].ref.path.split('/')[1];\n                const user = getState().usersState.users.find(el => el.uid === uid);\n\n\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data, user }\n                })\n\n                for (let i = 0; i < posts.length; i++) {\n                    dispatch(fetchUsersFollowingLikes(uid, posts[i].id))\n                }\n                dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid })\n\n            })\n    })\n}\n\nexport function fetchUsersFollowingLikes(uid, postId) {\n    return ((dispatch, getState) => {\n        let listener = firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .doc(postId)\n            .collection(\"likes\")\n            .doc(firebase.auth().currentUser.uid)\n            .onSnapshot((snapshot) => {\n                const postId = snapshot.id;\n\n                let currentUserLike = false;\n                if (snapshot.exists) {\n                    currentUserLike = true;\n                }\n\n                dispatch({ type: USERS_LIKES_STATE_CHANGE, postId, currentUserLike })\n            })\n        unsubscribe.push(listener)\n    })\n}\n\n\n\nexport function queryUsersByUsername(username) {\n    return ((dispatch, getState) => {\n        return new Promise((resolve, reject) => {\n            if (username.length == 0) {\n                resolve([])\n            }\n            firebase.firestore()\n                .collection('users')\n                .where('username', '>=', username)\n                .limit(10)\n                .get()\n                .then((snapshot) => {\n                    let users = snapshot.docs.map(doc => {\n                        const data = doc.data();\n                        const id = doc.id;\n                        return { id, ...data }\n                    });\n                    resolve(users);\n                })\n        })\n    })\n}\n\n\nexport function deletePost(item) {\n    return ((dispatch, getState) => {\n        return new Promise((resolve, reject) => {\n            firebase.firestore()\n                .collection('posts')\n                .doc(firebase.auth().currentUser.uid)\n                .collection(\"userPosts\")\n                .doc(item.id)\n                .delete()\n                .then(() => {\n                    resolve();\n                }).catch(() => {\n                    reject();\n                })\n        })\n    })\n}"
        }
    ]
}