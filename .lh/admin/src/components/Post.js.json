{
    "sourceFile": "admin/src/components/Post.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1668733509641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1668733509641,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react'\nimport { useLocation } from \"react-router-dom\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport { Paper, Avatar, Divider, CircularProgress, Button, TextField } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\n\nimport Chip from '@material-ui/core/Chip';\nimport { Clear, Check, PhotoSizeSelectLargeRounded, Markunread } from '@material-ui/icons';\nimport DoneIcon from '@material-ui/icons/Done';\nimport { useHistory } from \"react-router-dom\";\nimport { FaBeer } from 'react-icons/fa';\n\nexport default function Post(props) {\n    const [post, setPost] = useState(null)\n    const [comments, setComments] = useState([])\n    const [loaded, setLoaded] = useState(false)\n    const location = useLocation();\n    const history = useHistory();\n\n    useEffect(() => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(props.match.params.uid)\n            .collection('userPosts')\n            .doc(props.match.params.id)\n            .onSnapshot((snapshot) => {\n                if (snapshot.exists) {\n                    let result = snapshot.data();\n                    result.id = snapshot.id;\n                    setPost(result);\n                }\n            })\n    }, [])\n//Connects to the database and gets users posts.\n    useEffect(() => {\n        if (post == null) {\n            return;\n        }\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(props.match.params.uid)\n            .collection(\"userPosts\")\n            .doc(props.match.params.id)\n            .collection('comments')\n            .onSnapshot((snapshot) => {\n                let result = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data }\n                })\n                setComments(result)\n                setLoaded(true)\n            })\n    }, [post])\n//delete a users comment from the database and Famizone website\n    const deleteComment = (id) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(props.match.params.uid)\n            .collection(\"userPosts\")\n            .doc(props.match.params.id)\n            .collection('comments')\n            .doc(id)\n            .delete()\n    }\n    //deletes a users post and removes it from the feed.\n    const deletePost = () => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(props.match.params.uid)\n            .collection(\"userPosts\")\n            .doc(props.match.params.id)\n            .delete()\n\n        firebase.firestore()\n            .collection(\"feed\")\n            .doc(post.id)\n            .delete()\n    }\n\n//Makes a row and column for every post and a delete button\n    const columns = [\n        { field: 'id', headerName: 'ID', width: 280 },\n        { field: 'text', headerName: 'text', width: 400 },\n        {\n            field: 'delete', headerName: 'delete', width: 150,\n            renderCell: (params) => (\n\n                <div>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={() => { deleteComment(params.row.id) }}>\n                        Delete\n                    </Button>\n                </div>\n\n            ),\n\n        },\n        {\n            field: 'user', headerName: 'user', width: 150,\n            renderCell: (params) => (\n\n                <div>\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => { history.push({ pathname: `/user/${params.row.creator}` }) }}>\n                        View\n                    </Button>\n                </div>\n\n            ),\n\n        },\n    ];\n\n    if (!loaded) {\n        return (\n            <CircularProgress\n                variant=\"indeterminate\"\n                size={40}\n                thickness={4}\n                value={100}\n            />\n        )\n    }\n    const date = new Date(post['creation'].seconds * 1000)\n    return (\n        //when the delete button is pushed, the post gets deleted.\n        <div className=\" row m-5\">\n            <Paper className=\"col-md-8 m-3 p-5\" elevation={5}>\n                <div style={{ alignItems: 'center' }} className=\"pb-4\">\n\n                    <p style={{ textAlign: 'left', fontWeight: 'bold' }}>Caption</p>\n                    <p style={{ textAlign: 'left' }}>{post.caption}</p>\n\n                    <Divider className=\"mb-3\" />\n                    <p style={{ textAlign: 'left', fontWeight: 'bold' }}>Date</p>\n                    <p>{date.toString()}</p>\n                </div>\n\n                <Button variant=\"contained\" color=\"primary\" className=\"mr-2 col-md-3\" href={post.downloadURL} target=\"_blank\">Open Media</Button>\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => { deletePost() }}>\n                    Delete\n                </Button>\n            </Paper>\n\n\n            <Paper className=\"m-3\" style={{ height: 400, width: '100%', marginTop: '100px', backgroundColor: 'white' }} elevation={5}>\n                <DataGrid rows={comments} columns={columns} pageSize={5} column={columns.map((column) => ({\n                    ...column,\n                    disableClickEventBubbling: true,\n                }))} />\n            </Paper>\n        </div>\n    )\n}\n"
        }
    ]
}